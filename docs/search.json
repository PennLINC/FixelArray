[{"path":[]},{"path":"https://pennlinc.github.io/ModelArray/articles/ModelArray_basics.html","id":"goals","dir":"Articles","previous_headings":"Concepts and Goals","what":"Goals","title":"ModelArray Quick Start","text":"ModelArray generalizable, memory-efficient R package statistical analysis fixel data. features include: Easy use: set analysis just several lines codes; Low memory requirement, even large datasets; present, ModelArray supports linear models well generalized additive models (GAM) penalized splines, particularly useful studying nonlinear effects lifespan data.","code":""},{"path":"https://pennlinc.github.io/ModelArray/articles/ModelArray_basics.html","id":"elements","dir":"Articles","previous_headings":"Concepts and Goals","what":"Elements","title":"ModelArray Quick Start","text":"package, “element” general name one point data; voxel 3D images, vertex surface data, fixel fixel-based analysis. scalar value associated element. demographics phenotype data, can model scalar value independent variables covariates. treat element equally.","code":""},{"path":"https://pennlinc.github.io/ModelArray/articles/ModelArray_basics.html","id":"hdf5-or--h5-file-as-inputoutput","dir":"Articles","previous_headings":"Concepts and Goals","what":"HDF5 or .h5 file as input/output","title":"ModelArray Quick Start","text":"ModelArray accepts HDF5 (.h5) file input output. HDF5, Hierarchical Data Format version 5, makes convenient access, organize store large datasets. file extension .h5. convert fixel data .h5 format, please use ConFixel.","code":""},{"path":[]},{"path":"https://pennlinc.github.io/ModelArray/articles/ModelArray_basics.html","id":"load-modelarray-package","dir":"Articles","previous_headings":"Quick start: fixel-wise statistical analysis","what":"Load ModelArray package","title":"ModelArray Quick Start","text":"","code":"library(ModelArray)"},{"path":"https://pennlinc.github.io/ModelArray/articles/ModelArray_basics.html","id":"load-data-using-modelarray","dir":"Articles","previous_headings":"Quick start: fixel-wise statistical analysis","what":"Load data using ModelArray()","title":"ModelArray Quick Start","text":"provide example .h5 data “inst/extdata”. Example data fixel-wise data .h5 file generated ConFixel. shows 50 source files, scalars FD modelarray loaded.","code":"# file of example .h5, fixel-wise data h5_path <- system.file(\"extdata\", \"n50_fixels.h5\", package = \"ModelArray\") modelarray <- ModelArray(h5_path,                                 scalar_types = c(\"FD\"))  # if there is more than one metric, you can do: c(\"FD\", \"FDC\") modelarray # check what's in it     #> ModelArray located at /tmp/RtmpPpHvS2/temp_libpathdc3776771907/ModelArray/extdata/n50_fixels.h5 #>  #>   Source files:     50 #>   Scalars:          FD #>   Analyses:"},{"path":"https://pennlinc.github.io/ModelArray/articles/ModelArray_basics.html","id":"accessors-of-modelarray","dir":"Articles","previous_headings":"Quick start: fixel-wise statistical analysis","what":"Accessors of ModelArray","title":"ModelArray Quick Start","text":"access ModelArray’s slots:","code":"scalars(modelarray)[[\"FD\"]]   # FD data #> <182581 x 50> matrix of class DelayedMatrix and type \"double\": #>            FD/sub1_fd.mif  FD/sub2_fd.mif ... FD/sub49_fd.mif FD/sub50_fd.mif #>      [1,]      36.0214119      81.9753342   .        37.82116       237.40558 #>      [2,]    1046.6225586    1058.1074219   .      1085.59241       986.08856 #>      [3,]       0.2467898      83.6336441   .        20.79962       108.81217 #>      [4,]       0.6753999      72.3661575   .        13.40481       120.06551 #>      [5,]       0.2290502       1.7837602   .       132.53795        15.16265 #>       ...               .               .   .               .               . #> [182577,]      0.02690634     14.75695896   .       31.983732      150.156906 #> [182578,]      0.04722600     23.99450111   .       27.997149       83.266426 #> [182579,]      0.11819888     43.39178085   .       61.914310       99.171700 #> [182580,]     32.06180573     11.31695938   .       13.557989        3.398834 #> [182581,]      9.01556969     12.15083504   .       35.347015       21.815554 sources(modelarray)[[\"FD\"]]  # list of source filenames for FD data #>  [1] \"FD/sub1_fd.mif\"  \"FD/sub2_fd.mif\"  \"FD/sub3_fd.mif\"  \"FD/sub4_fd.mif\"  #>  [5] \"FD/sub5_fd.mif\"  \"FD/sub6_fd.mif\"  \"FD/sub7_fd.mif\"  \"FD/sub8_fd.mif\"  #>  [9] \"FD/sub9_fd.mif\"  \"FD/sub10_fd.mif\" \"FD/sub11_fd.mif\" \"FD/sub12_fd.mif\" #> [13] \"FD/sub13_fd.mif\" \"FD/sub14_fd.mif\" \"FD/sub15_fd.mif\" \"FD/sub16_fd.mif\" #> [17] \"FD/sub17_fd.mif\" \"FD/sub18_fd.mif\" \"FD/sub19_fd.mif\" \"FD/sub20_fd.mif\" #> [21] \"FD/sub21_fd.mif\" \"FD/sub22_fd.mif\" \"FD/sub23_fd.mif\" \"FD/sub24_fd.mif\" #> [25] \"FD/sub25_fd.mif\" \"FD/sub26_fd.mif\" \"FD/sub27_fd.mif\" \"FD/sub28_fd.mif\" #> [29] \"FD/sub29_fd.mif\" \"FD/sub30_fd.mif\" \"FD/sub31_fd.mif\" \"FD/sub32_fd.mif\" #> [33] \"FD/sub33_fd.mif\" \"FD/sub34_fd.mif\" \"FD/sub35_fd.mif\" \"FD/sub36_fd.mif\" #> [37] \"FD/sub37_fd.mif\" \"FD/sub38_fd.mif\" \"FD/sub39_fd.mif\" \"FD/sub40_fd.mif\" #> [41] \"FD/sub41_fd.mif\" \"FD/sub42_fd.mif\" \"FD/sub43_fd.mif\" \"FD/sub44_fd.mif\" #> [45] \"FD/sub45_fd.mif\" \"FD/sub46_fd.mif\" \"FD/sub47_fd.mif\" \"FD/sub48_fd.mif\" #> [49] \"FD/sub49_fd.mif\" \"FD/sub50_fd.mif\""},{"path":"https://pennlinc.github.io/ModelArray/articles/ModelArray_basics.html","id":"preparation-for-statistical-analysis","dir":"Articles","previous_headings":"Quick start: fixel-wise statistical analysis","what":"Preparation for statistical analysis","title":"ModelArray Quick Start","text":"perform statistical analysis, please provide .csv file subjects’ demographic phenotype data interested , data used independent variables coviariates model. easiest way simply use cohort .csv prepared ConFixel, add necessary demographic phenotype data additional column needed. requirement .csv: must column “source_file”, providing filename source image file. requirement consistent ConFixel. purpose sanity (consistency) check orders .h5 file .csv file. Example please see ModelArray.lm(), ModelArray.gam() etc functions can flexibly handle order changed: long source file lists phenotypes modelarray can matched (either without changing order phenotypes), functions matching find correct rows phenotypes. However matched, error thrown . needed, can manipulate data.frame “phenotypes” (e.g. demean, add new column, etc) via R packages “dplyr”. See R: intro.","code":"csv_path <- system.file(\"extdata\", \"n50_cohort.csv\", package = \"ModelArray\")  #  phenotypes <- read.csv(csv_path)    head(phenotypes) #>   subject_id      age sex scalar_name    source_file  factorA     factorB #> 1       sub1 22.88783   F          FD FD/sub1_fd.mif 22.16587  0.87416816 #> 2       sub2 18.88235   M          FD FD/sub2_fd.mif 19.16176 -1.66829817 #> 3       sub3 23.85117   F          FD FD/sub3_fd.mif 22.88838 -0.24118500 #> 4       sub4 25.41304   M          FD FD/sub4_fd.mif 24.05978 -0.09271979 #> 5       sub5 16.74746   F          FD FD/sub5_fd.mif 17.56059 -0.69380591 #> 6       sub6 23.77783   M          FD FD/sub6_fd.mif 22.83337 -0.86222583"},{"path":"https://pennlinc.github.io/ModelArray/articles/ModelArray_basics.html","id":"linear-regression","dir":"Articles","previous_headings":"Quick start: fixel-wise statistical analysis","what":"Linear regression","title":"ModelArray Quick Start","text":"Now, let’s perform linear regression metric FD (y) subject’s age, using ModelArray.lm(): statistics many , try default list statistics: may specifically interested several statistics: list possible p value correction method, see p.adjust.methods (except “none”). run across fixels, simply use default setting element.subset = NULL.","code":"formula <- FD ~ age mylm_fullOutputs <- ModelArray.lm(formula, modelarray, phenotypes, \"FD\",  # dependent variable                       element.subset = 1:100,  # let's check out first 100 fixels                       full.outputs = TRUE, # let's first view all statistics                       ) #> subset: default  #> weights: default  #> na.action: default  #> method: default  #> model: default  #> x: default  #> y: default  #> qr: default  #> singular.ok: default  #> contrasts: default  #> offset: default #> Fitting element-wise linear models for FD #> initiating.... #> looping across elements.... head(mylm_fullOutputs) #>   element_id Intercept.estimate age.estimate Intercept.std.error age.std.error #> 1          0          163.59704   -3.5529524            61.46826      2.834597 #> 2          1         1006.39639    1.9317271            90.07811      4.153935 #> 3          2          167.42774   -4.5542156            68.43827      3.156018 #> 4          3           52.28663    0.7978552            52.78984      2.434393 #> 5          4          177.63929   -4.4614559            57.91336      2.670664 #> 6          5         1086.78063   -0.2157015            84.56369      3.899639 #>   Intercept.statistic age.statistic Intercept.p.value Intercept.p.value.fdr #> 1           2.6614879    -1.2534240      1.055048e-02          4.396032e-02 #> 2          11.1724856     0.4650354      5.938761e-15          1.484690e-13 #> 3           2.4464053    -1.4430259      1.814295e-02          6.479626e-02 #> 4           0.9904678     0.3277429      3.269124e-01          4.301479e-01 #> 5           3.0673281    -1.6705419      3.543869e-03          1.968816e-02 #> 6          12.8516222    -0.0553132      3.737785e-17          1.868892e-15 #>   age.p.value age.p.value.fdr model.r.squared model.adj.r.squared model.sigma #> 1   0.2161225       0.8727231    3.169332e-02          0.01152026    60.99555 #> 2   0.6440089       0.9612073    4.485167e-03         -0.01625473    89.38539 #> 3   0.1555078       0.8727231    4.157802e-02          0.02161090    67.91196 #> 4   0.7445313       0.9756312    2.232825e-03         -0.01855399    52.38387 #> 5   0.1013212       0.8727231    5.494529e-02          0.03525665    57.46799 #> 6   0.9561185       0.9756312    6.373655e-05         -0.02076827    83.91337 #>   model.statistic model.p.value model.p.value.fdr model.df model.logLik #> 1      1.57107176     0.2161225         0.8727231        1    -275.4664 #> 2      0.21625797     0.6440089         0.9612073        1    -294.5742 #> 3      2.08232389     0.1555078         0.8727231        1    -280.8370 #> 4      0.10741542     0.7445313         0.9756312        1    -267.8563 #> 5      2.79071018     0.1013212         0.8727231        1    -272.4878 #> 6      0.00305955     0.9561185         0.9756312        1    -291.4156 #>   model.AIC model.BIC model.deviance model.df.residual model.nobs #> 1  556.9329  562.6689       178582.0                48         50 #> 2  595.1485  600.8845       383507.9                48         50 #> 3  567.6740  573.4100       221377.6                48         50 #> 4  541.7126  547.4487       131715.4                48         50 #> 5  550.9756  556.7116       158523.4                48         50 #> 6  588.8313  594.5673       337989.8                48         50 mylm_default <- ModelArray.lm(formula, modelarray, phenotypes, \"FD\", element.subset = 1:100,                         n_cores = 2,  # running on 2 CPU cores for speeding up                       ) #> subset: default  #> weights: default  #> na.action: default  #> method: default  #> model: default  #> x: default  #> y: default  #> qr: default  #> singular.ok: default  #> contrasts: default  #> offset: default #> Fitting element-wise linear models for FD #> initiating.... #> looping across elements.... head(mylm_default) #>   element_id Intercept.estimate age.estimate Intercept.statistic age.statistic #> 1          0          163.59704   -3.5529524           2.6614879    -1.2534240 #> 2          1         1006.39639    1.9317271          11.1724856     0.4650354 #> 3          2          167.42774   -4.5542156           2.4464053    -1.4430259 #> 4          3           52.28663    0.7978552           0.9904678     0.3277429 #> 5          4          177.63929   -4.4614559           3.0673281    -1.6705419 #> 6          5         1086.78063   -0.2157015          12.8516222    -0.0553132 #>   Intercept.p.value Intercept.p.value.fdr age.p.value age.p.value.fdr #> 1      1.055048e-02          4.396032e-02   0.2161225       0.8727231 #> 2      5.938761e-15          1.484690e-13   0.6440089       0.9612073 #> 3      1.814295e-02          6.479626e-02   0.1555078       0.8727231 #> 4      3.269124e-01          4.301479e-01   0.7445313       0.9756312 #> 5      3.543869e-03          1.968816e-02   0.1013212       0.8727231 #> 6      3.737785e-17          1.868892e-15   0.9561185       0.9756312 #>   model.adj.r.squared model.p.value model.p.value.fdr #> 1          0.01152026     0.2161225         0.8727231 #> 2         -0.01625473     0.6440089         0.9612073 #> 3          0.02161090     0.1555078         0.8727231 #> 4         -0.01855399     0.7445313         0.9756312 #> 5          0.03525665     0.1013212         0.8727231 #> 6         -0.02076827     0.9561185         0.9756312 mylm <- ModelArray.lm(formula, modelarray, phenotypes, \"FD\", element.subset = 1:100,                        var.terms = c(\"estimate\", \"p.value\"), # statistics for terms such as intercept, age                       var.model = c(\"r.squared\", \"p.value\", \"AIC\"),    # statistics for the model                       correct.p.value.terms = c(\"fdr\",\"bonferroni\"),   # p value corrections for terms (i.e. age and intercept in our case)                       correct.p.value.model = \"fdr\",  # p value corrections for linear model                       n_cores = 2, ) #> subset: default  #> weights: default  #> na.action: default  #> method: default  #> model: default  #> x: default  #> y: default  #> qr: default  #> singular.ok: default  #> contrasts: default  #> offset: default #> Fitting element-wise linear models for FD #> initiating.... #> looping across elements.... head(mylm) #>   element_id Intercept.estimate age.estimate Intercept.p.value #> 1          0          163.59704   -3.5529524      1.055048e-02 #> 2          1         1006.39639    1.9317271      5.938761e-15 #> 3          2          167.42774   -4.5542156      1.814295e-02 #> 4          3           52.28663    0.7978552      3.269124e-01 #> 5          4          177.63929   -4.4614559      3.543869e-03 #> 6          5         1086.78063   -0.2157015      3.737785e-17 #>   Intercept.p.value.bonferroni Intercept.p.value.fdr age.p.value #> 1                 1.000000e+00          4.396032e-02   0.2161225 #> 2                 5.938761e-13          1.484690e-13   0.6440089 #> 3                 1.000000e+00          6.479626e-02   0.1555078 #> 4                 1.000000e+00          4.301479e-01   0.7445313 #> 5                 3.543869e-01          1.968816e-02   0.1013212 #> 6                 3.737785e-15          1.868892e-15   0.9561185 #>   age.p.value.bonferroni age.p.value.fdr model.r.squared model.p.value #> 1                      1       0.8727231    3.169332e-02     0.2161225 #> 2                      1       0.9612073    4.485167e-03     0.6440089 #> 3                      1       0.8727231    4.157802e-02     0.1555078 #> 4                      1       0.9756312    2.232825e-03     0.7445313 #> 5                      1       0.8727231    5.494529e-02     0.1013212 #> 6                      1       0.9756312    6.373655e-05     0.9561185 #>   model.p.value.fdr model.AIC #> 1         0.8727231  556.9329 #> 2         0.9612073  595.1485 #> 3         0.8727231  567.6740 #> 4         0.9756312  541.7126 #> 5         0.8727231  550.9756 #> 6         0.9756312  588.8313"},{"path":"https://pennlinc.github.io/ModelArray/articles/ModelArray_basics.html","id":"gam---generalized-additive-model","dir":"Articles","previous_headings":"Quick start: fixel-wise statistical analysis","what":"GAM - Generalized additive model","title":"ModelArray Quick Start","text":"Modelling age effect GAM often useful developing population GAM’s flexibility. Running ModelArray.gam() similar ModelArray.lm(): can also set full.outputs=TRUE request statistics (except p.value corrections partial R-squared delta adjusted R-squared - see ). can specify specific statistic terms interested assigning values var.smoothTerms, var.parametricTerms, var.model: can also run p value correction. Notice argument names ModelArray.gam bit different ModelArray.lm(). addition, can also request quantification important specific term model. Usually term interest smooth term. quantify, two metrics provided run: delta adjusted R-squared (delta.adj.rsq) partial R-squared (partial.rsq). See help(ModelArray.gam) detailed descriptions. Please use changed.rsq.term.index turn quantification. Notice metrics involve running reduced model (formula without term interest), run time longer. Now got columns ofs s_age.delta.adj.rsq s_age.partial.rsq, quantifications s(age).","code":"formula <- FD ~ s(age, k=4, fx=TRUE) + sex  # we add sex as a covariate mygam <- ModelArray.gam(formula, data = modelarray, phenotypes = phenotypes, scalar = \"FD\", element.subset = 1:100,                         n_cores = 2, pbar = TRUE) #> The formula requested: FD ~ s(age, k = 4, fx = TRUE) + sex  #> s(age):   k = 4;   fx = TRUE;   bs = tp (default) #> method: default #> Fitting element-wise GAMs for FD #> initiating.... #> looping across elements.... head(mygam) #>   element_id s_age.statistic s_age.p.value s_age.p.value.fdr Intercept.estimate #> 1          0       1.2306636    0.30963383         0.9626312           68.99361 #> 2          1       2.2871191    0.09143477         0.9085776         1065.70220 #> 3          2       1.1269130    0.34827816         0.9626312           74.01208 #> 4          3       0.8239727    0.48756050         0.9804550           62.10926 #> 5          4       2.1823941    0.10321419         0.9085776           89.36170 #> 6          5       1.9297905    0.13831264         0.9085776         1086.74460 #>   sexM.estimate Intercept.statistic sexM.statistic Intercept.p.value #> 1     36.640118            5.726418      2.1235803      7.940891e-07 #> 2    -35.661635           61.504732     -1.4371812      4.531281e-45 #> 3     -8.730507            5.292183     -0.4359225      3.457228e-06 #> 4     14.615306            5.870646      0.9646617      4.856860e-07 #> 5    -15.023467            7.777202     -0.9130189      7.287228e-10 #> 6     -9.190355           66.163570     -0.3907161      1.756068e-46 #>   Intercept.p.value.fdr sexM.p.value sexM.p.value.fdr model.dev.expl #> 1          1.005176e-06   0.03923706        0.7847411     0.13701296 #> 2          1.510427e-43   0.15758379        0.9512625     0.14551292 #> 3          3.884525e-06   0.66497706        0.9512625     0.07159834 #> 4          6.653232e-07   0.33986996        0.9512625     0.07036785 #> 5          2.602581e-09   0.36609851        0.9512625     0.13702724 #> 6          1.756068e-44   0.69785074        0.9512625     0.12488886 mygam_specific <- ModelArray.gam(formula, data = modelarray, phenotypes = phenotypes, scalar = \"FD\", element.subset = 1:100,                           var.smoothTerms = c(\"p.value\"),  # this is for smooth term, e.g. s(age) in our case                           var.parametricTerms = c(\"estimate\"),   # this is for parametric term, e.g. sex in our case                           var.model = c(\"adj.r.squared\", \"dev.expl\"),  # this is for the model                         n_cores = 2, pbar = TRUE) #> The formula requested: FD ~ s(age, k = 4, fx = TRUE) + sex  #> s(age):   k = 4;   fx = TRUE;   bs = tp (default) #> method: default #> Warning in check_validity_correctPValue(correct.p.value.parametricTerms, : #> p.value was not included in var.parametricTerms, so not to perform its p.value #> corrections #> Fitting element-wise GAMs for FD #> initiating.... #> looping across elements.... head(mygam_specific) #>   element_id s_age.p.value s_age.p.value.fdr Intercept.estimate sexM.estimate #> 1          0    0.30963383         0.9626312           68.99361     36.640118 #> 2          1    0.09143477         0.9085776         1065.70220    -35.661635 #> 3          2    0.34827816         0.9626312           74.01208     -8.730507 #> 4          3    0.48756050         0.9804550           62.10926     14.615306 #> 5          4    0.10321419         0.9085776           89.36170    -15.023467 #> 6          5    0.13831264         0.9085776         1086.74460     -9.190355 #>   model.adj.r.squared model.dev.expl #> 1          0.06030300     0.13701296 #> 2          0.06955851     0.14551292 #> 3         -0.01092625     0.07159834 #> 4         -0.01226612     0.07036785 #> 5          0.06031855     0.13702724 #> 6          0.04710121     0.12488886 mygam_pValueCorrect <- ModelArray.gam(formula, data = modelarray, phenotypes = phenotypes, scalar = \"FD\", element.subset = 1:100,                                       # we use default list of statistics output here                                       correct.p.value.smoothTerms = c(\"fdr\",\"bonferroni\"),  # for smooth terms, i.e. s(age) in our case                                       correct.p.value.parametricTerms = c(\"bonferroni\"),  # for parametric terms, i.e. sex (and intercept) in our case                                       # notice that there is no correction for model, as there is no p.value for GAM model                                       n_cores = 2, pbar = TRUE) #> The formula requested: FD ~ s(age, k = 4, fx = TRUE) + sex  #> s(age):   k = 4;   fx = TRUE;   bs = tp (default) #> method: default #> Fitting element-wise GAMs for FD #> initiating.... #> looping across elements.... mygam_changedRsq <- ModelArray.gam(formula, data = modelarray, phenotypes = phenotypes, scalar = \"FD\", element.subset = 1:100,                           changed.rsq.term.index = c(1),   # requesting the 1st term on right hand side of formula, i.e. s(age) in this case                         n_cores = 2, pbar = TRUE) #> The formula requested: FD ~ s(age, k = 4, fx = TRUE) + sex  #> s(age):   k = 4;   fx = TRUE;   bs = tp (default) #> method: default #> will get changed R-squared (delta.adj.rsq and partial.rsq) so the execution time will be longer. #> Fitting element-wise GAMs for FD #> initiating.... #> looping across elements.... #> Getting changed R-squared: running the reduced model... #> * Getting changed R-squared for term: s(age, k = 4, fx = TRUE) via reduced model as below; will show up as s_age in final dataframe #> FD ~ sex  head(mygam_changedRsq) #>   element_id s_age.statistic s_age.p.value s_age.p.value.fdr Intercept.estimate #> 1          0       1.2306636    0.30963383         0.9626312           68.99361 #> 2          1       2.2871191    0.09143477         0.9085776         1065.70220 #> 3          2       1.1269130    0.34827816         0.9626312           74.01208 #> 4          3       0.8239727    0.48756050         0.9804550           62.10926 #> 5          4       2.1823941    0.10321419         0.9085776           89.36170 #> 6          5       1.9297905    0.13831264         0.9085776         1086.74460 #>   sexM.estimate Intercept.statistic sexM.statistic Intercept.p.value #> 1     36.640118            5.726418      2.1235803      7.940891e-07 #> 2    -35.661635           61.504732     -1.4371812      4.531281e-45 #> 3     -8.730507            5.292183     -0.4359225      3.457228e-06 #> 4     14.615306            5.870646      0.9646617      4.856860e-07 #> 5    -15.023467            7.777202     -0.9130189      7.287228e-10 #> 6     -9.190355           66.163570     -0.3907161      1.756068e-46 #>   Intercept.p.value.fdr sexM.p.value sexM.p.value.fdr model.dev.expl #> 1          1.005176e-06   0.03923706        0.7847411     0.13701296 #> 2          1.510427e-43   0.15758379        0.9512625     0.14551292 #> 3          3.884525e-06   0.66497706        0.9512625     0.07159834 #> 4          6.653232e-07   0.33986996        0.9512625     0.07036785 #> 5          2.602581e-09   0.36609851        0.9512625     0.13702724 #> 6          1.756068e-44   0.69785074        0.9512625     0.12488886 #>   s_age.delta.adj.rsq s_age.partial.rsq #> 1         0.013547120        0.07582337 #> 2         0.074849313        0.13230192 #> 3         0.008018731        0.06987779 #> 4        -0.011136655        0.05207116 #> 5         0.069442111        0.12701339 #> 6         0.055374767        0.11398786"},{"path":"https://pennlinc.github.io/ModelArray/articles/ModelArray_basics.html","id":"write-the-results","dir":"Articles","previous_headings":"Quick start: fixel-wise statistical analysis","what":"Write the results","title":"ModelArray Quick Start","text":"Finally, can write results (data frame statistics) back .h5 file. can reload .h5 file check results: access results, simply use results():","code":"# it's not necessary to make a copy of original .h5 file as we are doing here - you can write the results into original one. Here we make a copy only not to overwrite the example data we provide in the package. h5_output_path <- gsub(\".h5\",\"_output.h5\",h5_path) file.copy(from=h5_path, to=h5_output_path, overwrite = TRUE, copy.mode = TRUE, copy.date = TRUE) #> [1] TRUE modelarray_output <- ModelArray(filepath = h5_output_path, scalar_types = \"FD\")  # write linear model results: writeResults(h5_output_path, df.output = mylm,  # the results data.frame you got              analysis_name=\"result_lm\", # give the results a name - you will use this name again when converting back to .mif in ConFixel              overwrite=TRUE)  # if there is an existing result with the same name in .h5, overwrite it  # write GAM results: writeResults(h5_output_path, df.output = mygam_specific,                analysis_name=\"result_gam\",               overwrite=TRUE) modelarray_new <- ModelArray(filepath = h5_output_path, scalar_types = \"FD\",                              analysis_names = c(\"result_lm\", \"result_gam\"))   # you can load more than one result at a time results(modelarray_new)[[\"result_lm\"]]$results_matrix #> <100 x 13> matrix of class DelayedMatrix and type \"double\": #>                element_id Intercept.estimate ...  model.p.value.fdr #>   [1,]            0.00000          163.59704   .          0.8727231 #>   [2,]            1.00000         1006.39639   .          0.9612073 #>   [3,]            2.00000          167.42774   .          0.8727231 #>   [4,]            3.00000           52.28663   .          0.9756312 #>   [5,]            4.00000          177.63929   .          0.8727231 #>    ...                  .                  .   .                  . #>  [96,]           95.00000          125.88592   .          0.9160308 #>  [97,]           96.00000           78.22538   .          0.9756312 #>  [98,]           97.00000          181.18603   .          0.8727231 #>  [99,]           98.00000          109.03199   .          0.9227030 #> [100,]           99.00000          298.71128   .          0.8727231 #>                 model.AIC #>   [1,]        556.9328521 #>   [2,]        595.1484727 #>   [3,]        567.6739667 #>   [4,]        541.7126248 #>   [5,]        550.9755709 #>    ...                  . #>  [96,]        552.8348351 #>  [97,]        552.3188260 #>  [98,]        555.4548211 #>  [99,]        569.1791464 #> [100,]        616.8408020 results(modelarray_new)[[\"result_gam\"]]$results_matrix #> <100 x 7> matrix of class DelayedMatrix and type \"double\": #>                 element_id       s_age.p.value ... model.adj.r.squared #>   [1,]          0.00000000          0.30963383   .          0.06030300 #>   [2,]          1.00000000          0.09143477   .          0.06955851 #>   [3,]          2.00000000          0.34827816   .         -0.01092625 #>   [4,]          3.00000000          0.48756050   .         -0.01226612 #>   [5,]          4.00000000          0.10321419   .          0.06031855 #>    ...                   .                   .   .                   . #>  [96,]         95.00000000          0.67150140   .        -0.044707964 #>  [97,]         96.00000000          0.85446801   .        -0.070146268 #>  [98,]         97.00000000          0.36294017   .        -0.010947839 #>  [99,]         98.00000000          0.37458916   .        -0.008952404 #> [100,]         99.00000000          0.08130631   .         0.068797134 #>             model.dev.expl #>   [1,]          0.13701296 #>   [2,]          0.14551292 #>   [3,]          0.07159834 #>   [4,]          0.07036785 #>   [5,]          0.13702724 #>    ...                   . #>  [96,]         0.040574319 #>  [97,]         0.017212611 #>  [98,]         0.071578515 #>  [99,]         0.073411057 #> [100,]         0.144813694"},{"path":"https://pennlinc.github.io/ModelArray/articles/a01_installations.html","id":"set-up-a-conda-environment","dir":"Articles","previous_headings":"","what":"Set up a conda environment","title":"Installation","text":"first create conda environment modelarray installing companion software ConFixel etc. ’ll install python version 3.9:","code":"foo@bar:~$ conda create --name modelarray python=3.9 foo@bar:~$ conda  activate modelarray"},{"path":"https://pennlinc.github.io/ModelArray/articles/a01_installations.html","id":"install-mrtrix","dir":"Articles","previous_headings":"","what":"Install MRtrix","title":"Installation","text":"ConFixel uses function mrconvert MRtrix, please make sure MRtrix installed. can either installed via conda conda environment just created, compiled source. See MRtrix’s webpage . Type mrview terminal check whether MRtrix installation successful.","code":""},{"path":"https://pennlinc.github.io/ModelArray/articles/a01_installations.html","id":"install-hdf5-libraries-in-the-system","dir":"Articles","previous_headings":"","what":"Install hdf5 libraries in the system","title":"Installation","text":"ModelArray works Hierarchical Data Format 5 (HDF5) file format, need make sure necessary libraries HDF5 installed system.","code":""},{"path":"https://pennlinc.github.io/ModelArray/articles/a01_installations.html","id":"on-a-linux-ubuntu-system","dir":"Articles","previous_headings":"Install hdf5 libraries in the system","what":"On a Linux Ubuntu system","title":"Installation","text":"’re Linux Ubuntu system: First, please check libhdf5-dev installed system: got one line outputs, congrats, libhdf5-dev installed. Otherwise, please install via:","code":"foo@bar:~$ ldconfig -p | grep libhdf5* foo@bar:~$ sudo apt-get update -y foo@bar:~$ sudo apt-get install -y libhdf5-dev"},{"path":"https://pennlinc.github.io/ModelArray/articles/a01_installations.html","id":"on-a-macos-system","dir":"Articles","previous_headings":"Install hdf5 libraries in the system","what":"On a macOS system","title":"Installation","text":"Use Homebrew install: details may refer webpage ","code":"foo@bar:~$ brew install hdf5"},{"path":"https://pennlinc.github.io/ModelArray/articles/a01_installations.html","id":"install-confixel-python-package-from-github","dir":"Articles","previous_headings":"","what":"Install ConFixel python package from GitHub","title":"Installation","text":"","code":"# We first activate the conda environment we just created: foo@bar:~$ conda activate modelarray    # Then install ConFixel: foo@bar:~$ cd ~/myProject foo@bar:myProject$ git clone https://github.com/PennLINC/ConFixel.git foo@bar:myProject$ cd ConFixel foo@bar:myProject$ pip install .  # You may remove the original source code if you are an end user instead of a developer: foo@bar:myProject$ cd .. foo@bar:myProject$ rm -r ConFixel"},{"path":"https://pennlinc.github.io/ModelArray/articles/a01_installations.html","id":"install-r","dir":"Articles","previous_headings":"","what":"Install R","title":"Installation","text":"ModelArray requires R >=4.1.2, currently tests ModelArray R 4.1.2. already installed , can skip step. don’t, may download CRAN.","code":""},{"path":"https://pennlinc.github.io/ModelArray/articles/a01_installations.html","id":"optional-install-rstudio","dir":"Articles","previous_headings":"","what":"(Optional) Install RStudio","title":"Installation","text":"RStudio provides good IDE using R. However ’s optional install RStudio. haven’t got one want install , may download .","code":""},{"path":"https://pennlinc.github.io/ModelArray/articles/a01_installations.html","id":"install-modelarray-r-package-from-github","dir":"Articles","previous_headings":"","what":"Install ModelArray R package from GitHub","title":"Installation","text":"ModelArray R package’s source code available GitHub. install R: Now, ModelArray ready use:","code":"# First, load library \"devtools\": library(devtools)  # if you got error, it means you don't have devtools installed, please install it by: install.packages(\"devtools\")  # Then, install ModelArray: devtools::install_github(\"PennLINC/ModelArray\") library(ModelArray)"},{"path":"https://pennlinc.github.io/ModelArray/articles/a01_installations.html","id":"optional-other-potential-packages-only-needed-for-downloading-demo-data-in-vignettea02_walkthrough-page","dir":"Articles","previous_headings":"","what":"(Optional) Other potential packages only needed for downloading demo data in vignette(\"a02_walkthrough\") page","title":"Installation","text":"several potential packages needed downloading demo data vignette(\"a02_walkthrough\") page. may skip step use demo data. wget tar don’t , please install first. macOS system, may try brew install . Linux Ubuntu system, may try sudo apt-get install .","code":""},{"path":"https://pennlinc.github.io/ModelArray/articles/a02_walkthrough.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Example walkthrough","text":"example walkthrough, use example fixel data demonstrate steps using ModelArray companion python package, ConFixel. following vignette(\"a01_installations\") page, successfully installed ModelArray, ConFixel, MRtrix. expect ConFixel installed conda environment called modelarray. first prepare data convert format ModelArray requires (Step 1), ’ll use ModelArray perform statistical analysis (Step 2). Finally convert results original file format view (Step 3).","code":""},{"path":"https://pennlinc.github.io/ModelArray/articles/a02_walkthrough.html","id":"step-1--prepare-your-data","dir":"Articles","previous_headings":"","what":"Step 1. Prepare your data","title":"Example walkthrough","text":"first create folder called “myProject” Desktop. terminal console: linux machine, ’ll see printed full path folder /home/<username>/Desktop/myProject , provide demo fixel data. demo data includes 100 subjects aged 8-22 years Philadelphia Neurodevelopmental Cohort (PNC) Satterthwaite et al., 2014. data generated following fixel-based analysis Raffelt et al., 2017 ready fixel-wise statistical analysis. can get data running following:","code":"$ cd ~/Desktop $ mkdir myProject $ cd myProject $ pwd       # print the full path of this folder $ wget -cO - https://osf.io/tce9d/download > download.tar.gz $ tar -xzf download.tar.gz $ rm download.tar.gz"},{"path":"https://pennlinc.github.io/ModelArray/articles/a02_walkthrough.html","id":"step-1-1--overview-of-the-data-organization","dir":"Articles","previous_headings":"Step 1. Prepare your data","what":"Step 1.1. Overview of the data organization","title":"Example walkthrough","text":"data organized following way: demo data, fixel-wise metric FDC. can see , folder FDC, besides subject-level fixel data template space (e.g. sub-010b693.mif), also files index.mif directions.mif. two files provide important information fixel locations - can learn definitions .","code":"~/Desktop/myProject ├── cohort_FDC_n100.csv ├── FDC │   ├── directions.mifs │   ├── index.mif │   ├── sub-010b693.mif │   ├── sub-0133f31.mif │   ├── sub-063fd82.mif │   ├── ... └── ..."},{"path":"https://pennlinc.github.io/ModelArray/articles/a02_walkthrough.html","id":"step-1-2--prepare-a-csv-file-of-cohort-phenotypes","dir":"Articles","previous_headings":"Step 1. Prepare your data","what":"Step 1.2. Prepare a CSV file of cohort phenotypes","title":"Example walkthrough","text":"addition fixel data, also need CSV file cohort phenotypes. file used ConFixel ModelArray. ’s example: cohort_FDC_n100.csv: table CSV file includes columns: Required: scalar_name, tells us metric analyzed, source_file, tells us mif file used subject Covariates: covariates want include statistical model. dti64MeanRelRMS measure -scanner motion, want control .","code":""},{"path":"https://pennlinc.github.io/ModelArray/articles/a02_walkthrough.html","id":"step-1-3--convert-data-into-a-hdf5-file-using-confixel","dir":"Articles","previous_headings":"Step 1. Prepare your data","what":"Step 1.3. Convert data into a HDF5 file using ConFixel","title":"Example walkthrough","text":"One reasons ModelArray memory efficient takes advantages Hierarchical Data Format 5 (HDF5) file format. extension file format .h5. short, HDF5 file stores large datasets hierarchically. Let’s use ConFixel convert list mif files HDF5 file. terminal console: mentioned , take /home/<username>/Desktop/myProject main folder; won’t need repeat paths ’ve used --relative-root flag. running confixel, see moving progress bar. finishes, looks like : Now got converted HDF5 file demo_FDC_n100.h5 folder ~/Desktop/myProject.","code":"$ conda activate modelarray $ confixel \\     --index-file FDC/index.mif \\     --directions-file FDC/directions.mif \\     --cohort-file cohort_FDC_n100.csv \\     --relative-root /home/<username>/Desktop/myProject \\     --output-hdf5 demo_FDC_n100.h5      # remember to use your specific path in --relative-root; # we recommend it's a full path too! Extracting .mif data... 100%|█████████████████████████████████████████| 100/100 [00:03<00:00, 30.33it/s]"},{"path":"https://pennlinc.github.io/ModelArray/articles/a02_walkthrough.html","id":"step-2--use-modelarray-to-perform-statistical-analysis","dir":"Articles","previous_headings":"","what":"Step 2. Use ModelArray to perform statistical analysis","title":"Example walkthrough","text":"next step use HDF5 file CSV file prepared perform statistical analysis R. installed RStudio (recommend), can simply launch RStudio. commands Step 2 section run R.","code":""},{"path":"https://pennlinc.github.io/ModelArray/articles/a02_walkthrough.html","id":"step-2-1--load-modelarray-package-in-r","dir":"Articles","previous_headings":"Step 2. Use ModelArray to perform statistical analysis","what":"Step 2.1. Load ModelArray package in R","title":"Example walkthrough","text":"’ve installed ModelArray, ’s load library:","code":"library(ModelArray)"},{"path":"https://pennlinc.github.io/ModelArray/articles/a02_walkthrough.html","id":"step-2-2--create-a-modelarray-class-object","dir":"Articles","previous_headings":"Step 2. Use ModelArray to perform statistical analysis","what":"Step 2.2. Create a ModelArray-class object","title":"Example walkthrough","text":"create ModelArray-class object represents HDF5 file fixel data, need HDF5 filename scalar’s name: ’ll see: shows 100 source FDC files modelarray created. may take look scalar matrix looks like using scalars(): ’ll see: Rows fixels (n = 602229), column names source filenames (n = 100). value specific fixel’s FDC mif file.","code":"# filename of example fixel data (.h5 file): h5_path <- \"~/Desktop/myProject/demo_FDC_n100.h5\" # create a ModelArray-class object: modelarray <- ModelArray(h5_path, scalar_types = c(\"FDC\"))  # let's check what's in it: modelarray ModelArray located at ~/Desktop/myProject/demo_FDC_n100.h5    Source files:     100   Scalars:          FDC   Analyses: # scalar FDC data: scalars(modelarray)[[\"FDC\"]] <602229 x 100> matrix of class DelayedMatrix and type \"double\":           FDC/sub-6fee490.mif FDC/sub-647f86c.mif ... FDC/sub-fb15b55.mif FDC/sub-063fd82.mif      [1,]          0.24264026          0.15679701   .          0.00454893          0.16528498      [2,]          0.04573315          0.30895054   .          0.25159708          0.33469012      [3,]          0.18638037          0.26985332   .          0.26864439          0.26453218      [4,]          0.13169773          0.36824343   .          0.19793315          0.27003124      [5,]          0.22650713          0.16020685   .          0.10235775          0.41848758       ...                   .                   .   .                   .                   . [602225,]           0.1058939           0.1262244   .           0.2559175           0.2618564 [602226,]           0.2273949           0.8616257   .           0.4713631           0.5220432 [602227,]           0.1899130           1.2083211   .           0.2561999           0.1202894 [602228,]           0.0000000           1.3483975   .           0.0000000           0.0000000 [602229,]           0.1275258           0.5184639   .           0.2065310           0.1833882"},{"path":"https://pennlinc.github.io/ModelArray/articles/a02_walkthrough.html","id":"step-2-3--load-cohort-phenotypes-csv-file","dir":"Articles","previous_headings":"Step 2. Use ModelArray to perform statistical analysis","what":"Step 2.3. Load cohort phenotypes CSV file","title":"Example walkthrough","text":"load accompanying CSV file: CSV file already provides sufficient covariates ready analysis , don’t need extra work .","code":"# filename of example fixel data (.h5 file): csv_path <- \"~/Desktop/myProject/cohort_FDC_n100.csv\" # load the CSV file: phenotypes <- read.csv(csv_path)"},{"path":"https://pennlinc.github.io/ModelArray/articles/a02_walkthrough.html","id":"step-2-4--perform-statistical-analysis","dir":"Articles","previous_headings":"Step 2. Use ModelArray to perform statistical analysis","what":"Step 2.4. Perform statistical analysis","title":"Example walkthrough","text":"modelarray data frame phenotypes set , can now perform statistical analysis. present, ModelArray supports linear models well generalized additive models (GAM) without penalized splines, particularly useful studying nonlinear effects lifespan data. Let’s start linear model ModelArray.lm(). first need formula defining model. mainly want test fixel FDC changes age adolescence, assuming ’s linear relationship. also add sex -scanner motion quantification dti64MeanRelRMS covariates. Intercept automatically added. first try first 100 fixels running fixels: ’ll see: first printed several options lm set, worked model fitting. Let’s check first 6 rows results, .e. results first 6 fixels: ’ll see: can see, fixel, default, ModelArray.lm() returns: estimation Intercept coefficients slopes terms t-statistics p-value p-value FDR correction adjusted R-squared p-value p-value FDR correction may request comprehensive statistics argument full.outputs=TRUE. Now let’s try ModelArray.gam(). example commands . Compared linear model, GAMs flexibly model linear nonlinear effects using smooth functions; penalty can also applied avoid -fitting. use s(Age) indicate fit spline smooth function. k=4 argument sets upper limit degrees freedom smooth function. Restricted maximum likelihood (REML) used fitting. addition default FDR correction, can also request Bonferroni correction. still first try first 100 fixels: ’ll see: GAM results first 6 fixels: ’ll see: can see, fixel, ModelArray.gam() returns: Several statistics smooth term s(Age), including F-statistics p-values (FDR Bonferroni correction); Several statistics parametric terms Intercept, sex, motion dti64MeanRelRMS, including estimation coefficient (slope), t-statistics, p-values (FDR Bonferroni correction); One statistic model: dev.expl, proportion null deviance explained model. options, please view pages ModelArray.lm() ModelArray.gam().","code":"# formula: formula.lm <- FDC ~ Age + sex + dti64MeanRelRMS # run linear model fitting with ModelArray.lm() on the first 100 fixels: mylm.try <- ModelArray.lm(formula.lm, modelarray, phenotypes, \"FDC\",                           element.subset = 1:100) subset: default  weights: default  na.action: default  method: default  model: default  x: default  y: default  qr: default  singular.ok: default  contrasts: default  offset: default  Fitting element-wise linear models for FDC initiating.... looping across elements....   |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=06s head(mylm.try) # formula: formula.gam <- FDC ~ s(Age, k=4) + sex + dti64MeanRelRMS # run GAM fitting with ModelArray.gam() on the first 100 fixels: mygam.try <- ModelArray.gam(formula.gam, modelarray, phenotypes, \"FDC\",                             element.subset = 1:100,                             correct.p.value.smoothTerms = c(\"fdr\", \"bonferroni\"),                             correct.p.value.parametricTerms = c(\"fdr\", \"bonferroni\"),                             method=\"REML\") The formula requested: FDC ~ s(Age, k = 4) + sex + dti64MeanRelRMS  s(Age):   k = 4;   fx = FALSE (default);   bs = tp (default) method = REML (default: GCV.Cp)  Fitting element-wise GAMs for FDC initiating.... looping across elements....   |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=14s head(mygam.try)"},{"path":"https://pennlinc.github.io/ModelArray/articles/a02_walkthrough.html","id":"step-2-5--a-full-run-and-saving-the-results","dir":"Articles","previous_headings":"Step 2. Use ModelArray to perform statistical analysis","what":"Step 2.5. A full run and saving the results","title":"Example walkthrough","text":"Previous examples ran small subset fixels. Now ’ll formally run across fixels save results. running fixels take substantial amount time, run linear model. Notice command uses default value element.subset=NULL fixels analyzed. Also notice , speed , ’re requesting 4 CPU cores run parallel. may adjust number based many CPU cores machine. Linux machine Intel(R) Xeon(R) 10th Gen CPU @ 2.81GHz using 4 CPU cores, takes around 2.5 hours finish. now save results data frame original h5 file: Notice analysis name specified argument analysis_name used ConFixel next step converting results back fixel mif file format. ’ll also used prefix mif files saved. can even check saved results h5 file (optional): ’ll see: results_lm shown .","code":"# run linear model fitting with ModelArray.lm() on the all fixels: mylm <- ModelArray.lm(formula.lm, modelarray, phenotypes, \"FDC\",                       n_cores = 4) writeResults(h5_path, df.output = mylm, analysis_name = \"results_lm\") # create a new ModelArray-class object: modelarray_new <- ModelArray(filepath = h5_path, scalar_types = \"FDC\",                              analysis_names = c(\"results_lm\")) modelarray_new ModelArray located at ~/Desktop/myProject/demo_FDC_n100.h5    Source files:     100   Scalars:          FDC   Analyses:         results_lm"},{"path":[]},{"path":"https://pennlinc.github.io/ModelArray/articles/a02_walkthrough.html","id":"step-3-1--convert-the-statistical-results-into-mif-file-format-using-confixel","dir":"Articles","previous_headings":"Step 3. Check out the result images","what":"Step 3.1. Convert the statistical results into mif file format using ConFixel","title":"Example walkthrough","text":"now use ConFixel convert results list mif files: ’s done, main folder myProject, new folder called results_lm, converted result mif files new folder: , 1m.p.value.* means ’s 1 - p-value image.","code":"$ conda activate modelarray   # activate the conda environment we created $ fixelstats_write \\   --index-file FDC/index.mif \\   --directions-file FDC/directions.mif \\   --cohort-file cohort_FDC_n100.csv \\   --relative-root /home/<username>/Desktop/myProject \\   --analysis-name results_lm \\   --input-hdf5 demo_FDC_n100.h5 \\   --output-dir results_lm    # remember to use your specific path in --relative-root; # we recommend it's a full path too! results_lm/ ├── directions.mif ├── index.mif ├── results_lm_Age.1m.p.value.fdr.mif ├── results_lm_Age.1m.p.value.mif ├── results_lm_Age.estimate.mif ├── results_lm_Age.p.value.fdr.mif ├── results_lm_Age.p.value.mif ├── results_lm_Age.statistic.mif ├── results_lm_dti64MeanRelRMS.1m.p.value.fdr.mif ├── results_lm_dti64MeanRelRMS.1m.p.value.mif ├── results_lm_dti64MeanRelRMS.estimate.mif ├── results_lm_dti64MeanRelRMS.p.value.fdr.mif ├── results_lm_dti64MeanRelRMS.p.value.mif ├── results_lm_dti64MeanRelRMS.statistic.mif ├── results_lm_element_id.mif ├── results_lm_Intercept.1m.p.value.fdr.mif ├── ... ├── results_lm_model.1m.p.value.fdr.mif ├── results_lm_model.1m.p.value.mif ├── results_lm_model.adj.r.squared.mif ├── results_lm_model.p.value.fdr.mif ├── results_lm_model.p.value.mif ├── results_lm_sex.1m.p.value.fdr.mif ├── ...  0 directories, 32 files"},{"path":"https://pennlinc.github.io/ModelArray/articles/a02_walkthrough.html","id":"step-3-2--view-the-results-in-mrtrixs-mrview","dir":"Articles","previous_headings":"Step 3. Check out the result images","what":"Step 3.2. View the results in MRtrix’s MRView","title":"Example walkthrough","text":"can launch MRView terminal mrview: Click File -> Open, select index.mif. click Tools -> Fixel plot, ’ll see side panel “Fixel plot”. Within side panel, click button “Open fixel image” (see , highlighted red): Open fixel image , select index.mif file . ’ll see colored directions.mif. Now can choose image display. Click filename next “colour ”, select results_lm_Age.estimate.mif; click button next “threshold ”, select results_lm_model.p.value.fdr.mif, check/tick option upper limit, enter “0.005”. may change view clicking “View” upper panel. example view: example view","code":"# Suppose you're in myProject folder: $ cd results_lm   # switch to results folder $ mrview"},{"path":[]},{"path":"https://pennlinc.github.io/ModelArray/articles/a03_ModelArray_basics.html","id":"goals","dir":"Articles","previous_headings":"Concepts and Goals","what":"Goals","title":"ModelArray Quick Start","text":"ModelArray generalizable, memory-efficient R package statistical analysis fixel data. features include: Easy use: set analysis just several lines codes; Low memory requirement, even large datasets; present, ModelArray supports linear models well generalized additive models (GAM) penalized splines, particularly useful studying nonlinear effects lifespan data.","code":""},{"path":"https://pennlinc.github.io/ModelArray/articles/a03_ModelArray_basics.html","id":"elements","dir":"Articles","previous_headings":"Concepts and Goals","what":"Elements","title":"ModelArray Quick Start","text":"package, “element” general name one point data; voxel 3D images, vertex surface data, fixel fixel-based analysis. scalar value associated element. demographics phenotype data, can model scalar value independent variables covariates. treat element equally.","code":""},{"path":"https://pennlinc.github.io/ModelArray/articles/a03_ModelArray_basics.html","id":"hdf5-or--h5-file-as-inputoutput","dir":"Articles","previous_headings":"Concepts and Goals","what":"HDF5 or .h5 file as input/output","title":"ModelArray Quick Start","text":"ModelArray accepts HDF5 (.h5) file input output. HDF5, Hierarchical Data Format version 5, makes convenient access, organize store large datasets. file extension .h5. convert fixel data .h5 format, please use ConFixel.","code":""},{"path":[]},{"path":"https://pennlinc.github.io/ModelArray/articles/a03_ModelArray_basics.html","id":"load-modelarray-package","dir":"Articles","previous_headings":"Quick start: fixel-wise statistical analysis","what":"Load ModelArray package","title":"ModelArray Quick Start","text":"","code":"library(ModelArray)"},{"path":"https://pennlinc.github.io/ModelArray/articles/a03_ModelArray_basics.html","id":"load-data-using-modelarray","dir":"Articles","previous_headings":"Quick start: fixel-wise statistical analysis","what":"Load data using ModelArray()","title":"ModelArray Quick Start","text":"provide example .h5 data “inst/extdata”. Example data fixel-wise data .h5 file generated ConFixel. shows 50 source files, scalars FD modelarray loaded.","code":"# file of example .h5, fixel-wise data h5_path <- system.file(\"extdata\", \"n50_fixels.h5\", package = \"ModelArray\") modelarray <- ModelArray(h5_path,                                 scalar_types = c(\"FD\"))  # if there is more than one metric, you can do: c(\"FD\", \"FDC\") modelarray # check what's in it     #> ModelArray located at /tmp/RtmpBuoaaR/temp_libpath98b737075a02/ModelArray/extdata/n50_fixels.h5 #>  #>   Source files:     50 #>   Scalars:          FD #>   Analyses:"},{"path":"https://pennlinc.github.io/ModelArray/articles/a03_ModelArray_basics.html","id":"accessors-of-modelarray","dir":"Articles","previous_headings":"Quick start: fixel-wise statistical analysis","what":"Accessors of ModelArray","title":"ModelArray Quick Start","text":"access ModelArray’s slots:","code":"scalars(modelarray)[[\"FD\"]]   # FD data #> <182581 x 50> matrix of class DelayedMatrix and type \"double\": #>            FD/sub1_fd.mif  FD/sub2_fd.mif ... FD/sub49_fd.mif FD/sub50_fd.mif #>      [1,]      78.9181061      83.3063889   .        48.12224        92.06505 #>      [2,]    1046.6225586    1058.1074219   .      1085.59241       986.08856 #>      [3,]       0.2467898      83.6336441   .        20.79962       108.81217 #>      [4,]       0.6753999      72.3661575   .        13.40481       120.06551 #>      [5,]       0.2290502       1.7837602   .       132.53795        15.16265 #>       ...               .               .   .               .               . #> [182577,]      0.02690634     14.75695896   .       31.983732      150.156906 #> [182578,]      0.04722600     23.99450111   .       27.997149       83.266426 #> [182579,]      0.11819888     43.39178085   .       61.914310       99.171700 #> [182580,]     32.06180573     11.31695938   .       13.557989        3.398834 #> [182581,]      9.01556969     12.15083504   .       35.347015       21.815554 sources(modelarray)[[\"FD\"]]  # list of source filenames for FD data #>  [1] \"FD/sub1_fd.mif\"  \"FD/sub2_fd.mif\"  \"FD/sub3_fd.mif\"  \"FD/sub4_fd.mif\"  #>  [5] \"FD/sub5_fd.mif\"  \"FD/sub6_fd.mif\"  \"FD/sub7_fd.mif\"  \"FD/sub8_fd.mif\"  #>  [9] \"FD/sub9_fd.mif\"  \"FD/sub10_fd.mif\" \"FD/sub11_fd.mif\" \"FD/sub12_fd.mif\" #> [13] \"FD/sub13_fd.mif\" \"FD/sub14_fd.mif\" \"FD/sub15_fd.mif\" \"FD/sub16_fd.mif\" #> [17] \"FD/sub17_fd.mif\" \"FD/sub18_fd.mif\" \"FD/sub19_fd.mif\" \"FD/sub20_fd.mif\" #> [21] \"FD/sub21_fd.mif\" \"FD/sub22_fd.mif\" \"FD/sub23_fd.mif\" \"FD/sub24_fd.mif\" #> [25] \"FD/sub25_fd.mif\" \"FD/sub26_fd.mif\" \"FD/sub27_fd.mif\" \"FD/sub28_fd.mif\" #> [29] \"FD/sub29_fd.mif\" \"FD/sub30_fd.mif\" \"FD/sub31_fd.mif\" \"FD/sub32_fd.mif\" #> [33] \"FD/sub33_fd.mif\" \"FD/sub34_fd.mif\" \"FD/sub35_fd.mif\" \"FD/sub36_fd.mif\" #> [37] \"FD/sub37_fd.mif\" \"FD/sub38_fd.mif\" \"FD/sub39_fd.mif\" \"FD/sub40_fd.mif\" #> [41] \"FD/sub41_fd.mif\" \"FD/sub42_fd.mif\" \"FD/sub43_fd.mif\" \"FD/sub44_fd.mif\" #> [45] \"FD/sub45_fd.mif\" \"FD/sub46_fd.mif\" \"FD/sub47_fd.mif\" \"FD/sub48_fd.mif\" #> [49] \"FD/sub49_fd.mif\" \"FD/sub50_fd.mif\""},{"path":"https://pennlinc.github.io/ModelArray/articles/a03_ModelArray_basics.html","id":"preparation-for-statistical-analysis","dir":"Articles","previous_headings":"Quick start: fixel-wise statistical analysis","what":"Preparation for statistical analysis","title":"ModelArray Quick Start","text":"perform statistical analysis, please provide .csv file subjects’ demographic phenotype data interested , data used independent variables coviariates model. easiest way simply use cohort .csv prepared ConFixel, add necessary demographic phenotype data additional column needed. requirement .csv: must column “source_file”, providing filename source image file. requirement consistent ConFixel. purpose sanity (consistency) check orders .h5 file .csv file. Example please see ModelArray.lm(), ModelArray.gam() etc functions can flexibly handle order changed: long source file lists phenotypes modelarray can matched (either without changing order phenotypes), functions matching find correct rows phenotypes. However matched, error thrown . needed, can manipulate data.frame “phenotypes” (e.g. demean, add new column, etc) via R packages “dplyr”. See R: intro.","code":"csv_path <- system.file(\"extdata\", \"n50_cohort.csv\", package = \"ModelArray\")  #  phenotypes <- read.csv(csv_path)    head(phenotypes) #>   subject_id      age sex scalar_name    source_file  factorA     factorB #> 1       sub1 22.88783   F          FD FD/sub1_fd.mif 22.16587  0.87416816 #> 2       sub2 18.88235   M          FD FD/sub2_fd.mif 19.16176 -1.66829817 #> 3       sub3 23.85117   F          FD FD/sub3_fd.mif 22.88838 -0.24118500 #> 4       sub4 25.41304   M          FD FD/sub4_fd.mif 24.05978 -0.09271979 #> 5       sub5 16.74746   F          FD FD/sub5_fd.mif 17.56059 -0.69380591 #> 6       sub6 23.77783   M          FD FD/sub6_fd.mif 22.83337 -0.86222583"},{"path":"https://pennlinc.github.io/ModelArray/articles/a03_ModelArray_basics.html","id":"linear-regression","dir":"Articles","previous_headings":"Quick start: fixel-wise statistical analysis","what":"Linear regression","title":"ModelArray Quick Start","text":"Now, let’s perform linear regression metric FD (y) subject’s age, using ModelArray.lm(): statistics many , try default list statistics: may specifically interested several statistics: list possible p value correction method, see p.adjust.methods (except “none”). run across fixels, simply use default setting element.subset = NULL.","code":"formula <- FD ~ age mylm_fullOutputs <- ModelArray.lm(formula, modelarray, phenotypes, \"FD\",  # dependent variable                       element.subset = 1:10,  # let's check out first 10 fixels                       full.outputs = TRUE, # let's first view all statistics                       ) #> subset: default  #> weights: default  #> na.action: default  #> method: default  #> model: default  #> x: default  #> y: default  #> qr: default  #> singular.ok: default  #> contrasts: default  #> offset: default #> Fitting element-wise linear models for FD #> initiating.... #> looping across elements.... head(mylm_fullOutputs) #>   element_id Intercept.estimate age.estimate Intercept.std.error age.std.error #> 1          0          -49.58235    6.1805136            11.68890     0.5390316 #> 2          1         1006.39639    1.9317271            90.07811     4.1539351 #> 3          2          167.42774   -4.5542156            68.43827     3.1560178 #> 4          3           52.28663    0.7978552            52.78984     2.4343935 #> 5          4          177.63929   -4.4614559            57.91336     2.6706639 #> 6          5         1086.78063   -0.2157015            84.56369     3.8996388 #>   Intercept.statistic age.statistic Intercept.p.value Intercept.p.value.fdr #> 1          -4.2418310    11.4659584      1.005334e-04          2.513335e-04 #> 2          11.1724856     0.4650354      5.938761e-15          2.969380e-14 #> 3           2.4464053    -1.4430259      1.814295e-02          3.023825e-02 #> 4           0.9904678     0.3277429      3.269124e-01          4.670177e-01 #> 5           3.0673281    -1.6705419      3.543869e-03          7.087737e-03 #> 6          12.8516222    -0.0553132      3.737785e-17          3.737785e-16 #>    age.p.value age.p.value.fdr model.r.squared model.adj.r.squared model.sigma #> 1 2.385683e-15    2.385683e-14    7.325431e-01          0.72697113    11.59901 #> 2 6.440089e-01    8.050111e-01    4.485167e-03         -0.01625473    89.38539 #> 3 1.555078e-01    5.183592e-01    4.157802e-02          0.02161090    67.91196 #> 4 7.445313e-01    8.272570e-01    2.232825e-03         -0.01855399    52.38387 #> 5 1.013212e-01    5.066059e-01    5.494529e-02          0.03525665    57.46799 #> 6 9.561185e-01    9.561185e-01    6.373655e-05         -0.02076827    83.91337 #>   model.statistic model.p.value model.p.value.fdr model.df model.logLik #> 1    131.46820133  2.385683e-15      2.385683e-14        1    -192.4724 #> 2      0.21625797  6.440089e-01      8.050111e-01        1    -294.5742 #> 3      2.08232389  1.555078e-01      5.183592e-01        1    -280.8370 #> 4      0.10741542  7.445313e-01      8.272570e-01        1    -267.8563 #> 5      2.79071018  1.013212e-01      5.066059e-01        1    -272.4878 #> 6      0.00305955  9.561185e-01      9.561185e-01        1    -291.4156 #>   model.AIC model.BIC model.deviance model.df.residual model.nobs #> 1  390.9447  396.6808        6457.78                48         50 #> 2  595.1485  600.8845      383507.86                48         50 #> 3  567.6740  573.4100      221377.63                48         50 #> 4  541.7126  547.4487      131715.35                48         50 #> 5  550.9756  556.7116      158523.38                48         50 #> 6  588.8313  594.5673      337989.81                48         50 mylm_default <- ModelArray.lm(formula, modelarray, phenotypes, \"FD\", element.subset = 1:10,                         n_cores = 2,  # running on 2 CPU cores for speeding up                       ) #> subset: default  #> weights: default  #> na.action: default  #> method: default  #> model: default  #> x: default  #> y: default  #> qr: default  #> singular.ok: default  #> contrasts: default  #> offset: default #> Fitting element-wise linear models for FD #> initiating.... #> looping across elements.... head(mylm_default) #>   element_id Intercept.estimate age.estimate Intercept.statistic age.statistic #> 1          0          -49.58235    6.1805136          -4.2418310    11.4659584 #> 2          1         1006.39639    1.9317271          11.1724856     0.4650354 #> 3          2          167.42774   -4.5542156           2.4464053    -1.4430259 #> 4          3           52.28663    0.7978552           0.9904678     0.3277429 #> 5          4          177.63929   -4.4614559           3.0673281    -1.6705419 #> 6          5         1086.78063   -0.2157015          12.8516222    -0.0553132 #>   Intercept.p.value Intercept.p.value.fdr  age.p.value age.p.value.fdr #> 1      1.005334e-04          2.513335e-04 2.385683e-15    2.385683e-14 #> 2      5.938761e-15          2.969380e-14 6.440089e-01    8.050111e-01 #> 3      1.814295e-02          3.023825e-02 1.555078e-01    5.183592e-01 #> 4      3.269124e-01          4.670177e-01 7.445313e-01    8.272570e-01 #> 5      3.543869e-03          7.087737e-03 1.013212e-01    5.066059e-01 #> 6      3.737785e-17          3.737785e-16 9.561185e-01    9.561185e-01 #>   model.adj.r.squared model.p.value model.p.value.fdr #> 1          0.72697113  2.385683e-15      2.385683e-14 #> 2         -0.01625473  6.440089e-01      8.050111e-01 #> 3          0.02161090  1.555078e-01      5.183592e-01 #> 4         -0.01855399  7.445313e-01      8.272570e-01 #> 5          0.03525665  1.013212e-01      5.066059e-01 #> 6         -0.02076827  9.561185e-01      9.561185e-01 mylm <- ModelArray.lm(formula, modelarray, phenotypes, \"FD\", element.subset = 1:10,                        var.terms = c(\"estimate\", \"p.value\"), # statistics for terms such as intercept, age                       var.model = c(\"r.squared\", \"p.value\", \"AIC\"),    # statistics for the model                       correct.p.value.terms = c(\"fdr\",\"bonferroni\"),   # p value corrections for terms (i.e. age and intercept in our case)                       correct.p.value.model = \"fdr\",  # p value corrections for linear model                       n_cores = 2, ) #> subset: default  #> weights: default  #> na.action: default  #> method: default  #> model: default  #> x: default  #> y: default  #> qr: default  #> singular.ok: default  #> contrasts: default  #> offset: default #> Fitting element-wise linear models for FD #> initiating.... #> looping across elements.... head(mylm) #>   element_id Intercept.estimate age.estimate Intercept.p.value #> 1          0          -49.58235    6.1805136      1.005334e-04 #> 2          1         1006.39639    1.9317271      5.938761e-15 #> 3          2          167.42774   -4.5542156      1.814295e-02 #> 4          3           52.28663    0.7978552      3.269124e-01 #> 5          4          177.63929   -4.4614559      3.543869e-03 #> 6          5         1086.78063   -0.2157015      3.737785e-17 #>   Intercept.p.value.bonferroni Intercept.p.value.fdr  age.p.value #> 1                 1.005334e-03          2.513335e-04 2.385683e-15 #> 2                 5.938761e-14          2.969380e-14 6.440089e-01 #> 3                 1.814295e-01          3.023825e-02 1.555078e-01 #> 4                 1.000000e+00          4.670177e-01 7.445313e-01 #> 5                 3.543869e-02          7.087737e-03 1.013212e-01 #> 6                 3.737785e-16          3.737785e-16 9.561185e-01 #>   age.p.value.bonferroni age.p.value.fdr model.r.squared model.p.value #> 1           2.385683e-14    2.385683e-14    7.325431e-01  2.385683e-15 #> 2           1.000000e+00    8.050111e-01    4.485167e-03  6.440089e-01 #> 3           1.000000e+00    5.183592e-01    4.157802e-02  1.555078e-01 #> 4           1.000000e+00    8.272570e-01    2.232825e-03  7.445313e-01 #> 5           1.000000e+00    5.066059e-01    5.494529e-02  1.013212e-01 #> 6           1.000000e+00    9.561185e-01    6.373655e-05  9.561185e-01 #>   model.p.value.fdr model.AIC #> 1      2.385683e-14  390.9447 #> 2      8.050111e-01  595.1485 #> 3      5.183592e-01  567.6740 #> 4      8.272570e-01  541.7126 #> 5      5.066059e-01  550.9756 #> 6      9.561185e-01  588.8313"},{"path":"https://pennlinc.github.io/ModelArray/articles/a03_ModelArray_basics.html","id":"gam---generalized-additive-model","dir":"Articles","previous_headings":"Quick start: fixel-wise statistical analysis","what":"GAM - Generalized additive model","title":"ModelArray Quick Start","text":"Modelling age effect GAM often useful developing population GAM’s flexibility. Running ModelArray.gam() similar ModelArray.lm(): can also set full.outputs=TRUE request statistics (except p.value corrections partial R-squared delta adjusted R-squared - see ). can specify specific statistic terms interested assigning values var.smoothTerms, var.parametricTerms, var.model: can also run p value correction. Notice argument names ModelArray.gam bit different ModelArray.lm(). addition, can also request quantification important specific term model. Usually term interest smooth term. quantify, two metrics provided run: delta adjusted R-squared (delta.adj.rsq) partial R-squared (partial.rsq). See help(ModelArray.gam) detailed descriptions. Please use changed.rsq.term.index turn quantification. Notice metrics involve running reduced model (formula without term interest), run time longer. Now got columns ofs s_age.delta.adj.rsq s_age.partial.rsq, quantifications s(age).","code":"formula <- FD ~ s(age, k=4, fx=TRUE) + sex  # we add sex as a covariate mygam <- ModelArray.gam(formula, data = modelarray, phenotypes = phenotypes, scalar = \"FD\", element.subset = 1:10,                         n_cores = 2, pbar = TRUE) #> The formula requested: FD ~ s(age, k = 4, fx = TRUE) + sex  #> s(age):   k = 4;   fx = TRUE;   bs = tp (default) #> method: default #> Fitting element-wise GAMs for FD #> initiating.... #> looping across elements.... head(mygam) #>   element_id s_age.statistic s_age.p.value s_age.p.value.fdr Intercept.estimate #> 1          0      49.7147127  2.486953e-14      2.486953e-13           78.32632 #> 2          1       2.2871191  9.143477e-02      3.440473e-01         1065.70220 #> 3          2       1.1269130  3.482782e-01      6.965563e-01           74.01208 #> 4          3       0.8239727  4.875605e-01      7.311294e-01           62.10926 #> 5          4       2.1823941  1.032142e-01      3.440473e-01           89.36170 #> 6          5       1.9297905  1.383126e-01      3.457816e-01         1086.74460 #>   sexM.estimate Intercept.statistic sexM.statistic Intercept.p.value #> 1      9.579073           36.037170      3.0775423      7.773933e-35 #> 2    -35.661635           61.504732     -1.4371812      4.531281e-45 #> 3     -8.730507            5.292183     -0.4359225      3.457228e-06 #> 4     14.615306            5.870646      0.9646617      4.856860e-07 #> 5    -15.023467            7.777202     -0.9130189      7.287228e-10 #> 6     -9.190355           66.163570     -0.3907161      1.756068e-46 #>   Intercept.p.value.fdr sexM.p.value sexM.p.value.fdr model.dev.expl #> 1          1.943483e-34  0.003547488       0.03547488     0.78548290 #> 2          2.265641e-44  0.157583789       0.61016419     0.14551292 #> 3          3.841364e-06  0.664977063       0.69785074     0.07159834 #> 4          6.938371e-07  0.339869964       0.61016419     0.07036785 #> 5          1.214538e-09  0.366098514       0.61016419     0.13702724 #> 6          1.756068e-45  0.697850744       0.69785074     0.12488886 mygam_specific <- ModelArray.gam(formula, data = modelarray, phenotypes = phenotypes, scalar = \"FD\", element.subset = 1:10,                           var.smoothTerms = c(\"p.value\"),  # this is for smooth term, e.g. s(age) in our case                           var.parametricTerms = c(\"estimate\"),   # this is for parametric term, e.g. sex in our case                           var.model = c(\"adj.r.squared\", \"dev.expl\"),  # this is for the model                         n_cores = 2, pbar = TRUE) #> The formula requested: FD ~ s(age, k = 4, fx = TRUE) + sex  #> s(age):   k = 4;   fx = TRUE;   bs = tp (default) #> method: default #> Warning in check_validity_correctPValue(correct.p.value.parametricTerms, : #> p.value was not included in var.parametricTerms, so not to perform its p.value #> corrections #> Fitting element-wise GAMs for FD #> initiating.... #> looping across elements.... head(mygam_specific) #>   element_id s_age.p.value s_age.p.value.fdr Intercept.estimate sexM.estimate #> 1          0  2.486953e-14      2.486953e-13           78.32632      9.579073 #> 2          1  9.143477e-02      3.440473e-01         1065.70220    -35.661635 #> 3          2  3.482782e-01      6.965563e-01           74.01208     -8.730507 #> 4          3  4.875605e-01      7.311294e-01           62.10926     14.615306 #> 5          4  1.032142e-01      3.440473e-01           89.36170    -15.023467 #> 6          5  1.383126e-01      3.457816e-01         1086.74460     -9.190355 #>   model.adj.r.squared model.dev.expl #> 1          0.76641471     0.78548290 #> 2          0.06955851     0.14551292 #> 3         -0.01092625     0.07159834 #> 4         -0.01226612     0.07036785 #> 5          0.06031855     0.13702724 #> 6          0.04710121     0.12488886 mygam_pValueCorrect <- ModelArray.gam(formula, data = modelarray, phenotypes = phenotypes, scalar = \"FD\", element.subset = 1:10,                                       # we use default list of statistics output here                                       correct.p.value.smoothTerms = c(\"fdr\",\"bonferroni\"),  # for smooth terms, i.e. s(age) in our case                                       correct.p.value.parametricTerms = c(\"bonferroni\"),  # for parametric terms, i.e. sex (and intercept) in our case                                       # notice that there is no correction for model, as there is no p.value for GAM model                                       n_cores = 2, pbar = TRUE) #> The formula requested: FD ~ s(age, k = 4, fx = TRUE) + sex  #> s(age):   k = 4;   fx = TRUE;   bs = tp (default) #> method: default #> Fitting element-wise GAMs for FD #> initiating.... #> looping across elements.... mygam_changedRsq <- ModelArray.gam(formula, data = modelarray, phenotypes = phenotypes, scalar = \"FD\", element.subset = 1:10,                           changed.rsq.term.index = c(1),   # requesting the 1st term on right hand side of formula, i.e. s(age) in this case                         n_cores = 2, pbar = TRUE) #> The formula requested: FD ~ s(age, k = 4, fx = TRUE) + sex  #> s(age):   k = 4;   fx = TRUE;   bs = tp (default) #> method: default #> will get changed R-squared (delta.adj.rsq and partial.rsq) so the execution time will be longer. #> Fitting element-wise GAMs for FD #> initiating.... #> looping across elements.... #> Getting changed R-squared: running the reduced model... #> * Getting changed R-squared for term: s(age, k = 4, fx = TRUE) via reduced model as below; will show up as s_age in final dataframe #> FD ~ sex  head(mygam_changedRsq) #>   element_id s_age.statistic s_age.p.value s_age.p.value.fdr Intercept.estimate #> 1          0      49.7147127  2.486953e-14      2.486953e-13           78.32632 #> 2          1       2.2871191  9.143477e-02      3.440473e-01         1065.70220 #> 3          2       1.1269130  3.482782e-01      6.965563e-01           74.01208 #> 4          3       0.8239727  4.875605e-01      7.311294e-01           62.10926 #> 5          4       2.1823941  1.032142e-01      3.440473e-01           89.36170 #> 6          5       1.9297905  1.383126e-01      3.457816e-01         1086.74460 #>   sexM.estimate Intercept.statistic sexM.statistic Intercept.p.value #> 1      9.579073           36.037170      3.0775423      7.773933e-35 #> 2    -35.661635           61.504732     -1.4371812      4.531281e-45 #> 3     -8.730507            5.292183     -0.4359225      3.457228e-06 #> 4     14.615306            5.870646      0.9646617      4.856860e-07 #> 5    -15.023467            7.777202     -0.9130189      7.287228e-10 #> 6     -9.190355           66.163570     -0.3907161      1.756068e-46 #>   Intercept.p.value.fdr sexM.p.value sexM.p.value.fdr model.dev.expl #> 1          1.943483e-34  0.003547488       0.03547488     0.78548290 #> 2          2.265641e-44  0.157583789       0.61016419     0.14551292 #> 3          3.841364e-06  0.664977063       0.69785074     0.07159834 #> 4          6.938371e-07  0.339869964       0.61016419     0.07036785 #> 5          1.214538e-09  0.366098514       0.61016419     0.13702724 #> 6          1.756068e-45  0.697850744       0.69785074     0.12488886 #>   s_age.delta.adj.rsq s_age.partial.rsq #> 1         0.711190007        0.76821345 #> 2         0.074849313        0.13230192 #> 3         0.008018731        0.06987779 #> 4        -0.011136655        0.05207116 #> 5         0.069442111        0.12701339 #> 6         0.055374767        0.11398786"},{"path":"https://pennlinc.github.io/ModelArray/articles/a03_ModelArray_basics.html","id":"write-the-results","dir":"Articles","previous_headings":"Quick start: fixel-wise statistical analysis","what":"Write the results","title":"ModelArray Quick Start","text":"Finally, can write results (data frame statistics) back .h5 file. can reload .h5 file check results: access results, simply use results():","code":"# it's not necessary to make a copy of original .h5 file as we are doing here - you can write the results into original one. Here we make a copy only not to overwrite the example data we provide in the package. h5_output_path <- gsub(\".h5\",\"_output.h5\",h5_path) file.copy(from=h5_path, to=h5_output_path, overwrite = TRUE, copy.mode = TRUE, copy.date = TRUE) #> [1] TRUE modelarray_output <- ModelArray(filepath = h5_output_path, scalar_types = \"FD\")  # write linear model results: writeResults(h5_output_path, df.output = mylm,  # the results data.frame you got              analysis_name=\"result_lm\", # give the results a name - you will use this name again when converting back to .mif in ConFixel              overwrite=TRUE)  # if there is an existing result with the same name in .h5, overwrite it  # write GAM results: writeResults(h5_output_path, df.output = mygam_specific,                analysis_name=\"result_gam\",               overwrite=TRUE) modelarray_new <- ModelArray(filepath = h5_output_path, scalar_types = \"FD\",                              analysis_names = c(\"result_lm\", \"result_gam\"))   # you can load more than one result at a time results(modelarray_new)[[\"result_lm\"]]$results_matrix #> <10 x 13> matrix of class DelayedMatrix and type \"double\": #>               element_id Intercept.estimate ...  model.p.value.fdr #>  [1,]            0.00000          -49.58235   .       2.385683e-14 #>  [2,]            1.00000         1006.39639   .       8.050111e-01 #>  [3,]            2.00000          167.42774   .       5.183592e-01 #>  [4,]            3.00000           52.28663   .       8.272570e-01 #>  [5,]            4.00000          177.63929   .       5.066059e-01 #>  [6,]            5.00000         1086.78063   .       9.561185e-01 #>  [7,]            6.00000           37.63180   .       8.050111e-01 #>  [8,]            7.00000           42.05280   .       8.050111e-01 #>  [9,]            8.00000           13.44064   .       7.472201e-01 #> [10,]            9.00000          891.47983   .       8.050111e-01 #>                model.AIC #>  [1,]       3.909447e+02 #>  [2,]       5.951485e+02 #>  [3,]       5.676740e+02 #>  [4,]       5.417126e+02 #>  [5,]       5.509756e+02 #>  [6,]       5.888313e+02 #>  [7,]       5.519358e+02 #>  [8,]       5.824826e+02 #>  [9,]       5.549443e+02 #> [10,]       5.979196e+02 results(modelarray_new)[[\"result_gam\"]]$results_matrix #> <10 x 7> matrix of class DelayedMatrix and type \"double\": #>                element_id       s_age.p.value ... model.adj.r.squared #>  [1,]        0.000000e+00        2.486953e-14   .         0.766414714 #>  [2,]        1.000000e+00        9.143477e-02   .         0.069558509 #>  [3,]        2.000000e+00        3.482782e-01   .        -0.010926248 #>  [4,]        3.000000e+00        4.875605e-01   .        -0.012266123 #>  [5,]        4.000000e+00        1.032142e-01   .         0.060318551 #>  [6,]        5.000000e+00        1.383126e-01   .         0.047101208 #>  [7,]        6.000000e+00        7.226223e-01   .        -0.027800167 #>  [8,]        7.000000e+00        9.227285e-01   .        -0.062172017 #>  [9,]        8.000000e+00        5.120670e-01   .        -0.005600177 #> [10,]        9.000000e+00        5.849035e-01   .        -0.042054854 #>            model.dev.expl #>  [1,]         0.785482900 #>  [2,]         0.145512917 #>  [3,]         0.071598344 #>  [4,]         0.070367846 #>  [5,]         0.137027241 #>  [6,]         0.124888865 #>  [7,]         0.056101888 #>  [8,]         0.024535902 #>  [9,]         0.076489634 #> [10,]         0.043010849"},{"path":"https://pennlinc.github.io/ModelArray/articles/a04_basic_r_intro.html","id":"r-syntax","dir":"Articles","previous_headings":"","what":"R syntax","title":"An intro to R","text":"Dot “.” valid variable name function (e.g. variable element.subset, function ModelArray.lm()) Syntax formula: example formula: can see even though define variable “FD”,“age” “sex”, ’s valid formula. Left hand side “~” dependent variable (y, response), right hand side includes independent variables / covariates.","code":"formula <- FD ~ age + sex"},{"path":"https://pennlinc.github.io/ModelArray/articles/a04_basic_r_intro.html","id":"prepare-the-phenotypes-data-frame-manipulations","dir":"Articles","previous_headings":"","what":"Prepare the phenotypes data.frame: manipulations","title":"An intro to R","text":"may want manipulate data.frame phenotypes passing ModelArray.lm() etc functions model fitting. Examples like de-mean rescale covariates. R package dplyr useful easy use manipulation.","code":"# install is first via: install.packages(\"dplyr\") library(dplyr)    # load into memory #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union"},{"path":"https://pennlinc.github.io/ModelArray/articles/a05_doc_for_developer.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Developer documentation","text":"ModelArray R package supports data Hierarchical Data Format 5 (HDF5) file format. utilizes DelayedArray HDF5Array R packages, statistical analysis can performed without loading original data HDF5 file memory. makes ModelArray efficient memory usage. details, please see section “ModelArray Construction” . Methods showing accessing ModelArray object basic. Please see section “Show accessors methods ModelArray class” . key function ModelArray package perform statistical analysis. details, please see section “Model fitting” . describe save statistical results HDF5 file disk. Finally, describe unit tests needed quality assurance.","code":""},{"path":"https://pennlinc.github.io/ModelArray/articles/a05_doc_for_developer.html","id":"modelarray-construction","dir":"Articles","previous_headings":"","what":"ModelArray Construction","title":"Developer documentation","text":"first define class called ModelArray using setClass(). ModelArray object (.e. instance ModelArray class) several slots: sources: source filenames (e.g., list .mif files fixel data) scalars: scalar matrix (matrices) results: statistical result matrices () path: path h5 file disk key feature ModelArray object memory efficient. entire dataset HDF5 (.h5) file loaded memory; minimal data loaded. achieve , first need ModelArraySeed(), utilizes HDF5Array::HDF5ArraySeed(), acting pointer .hdf5 file disk. make arrays ModelArray object look like “real” arrays, e.g. common array operations indexing transposing can applied, utilize package DelayedArray wraps data -disk HDF5 file DelayedArray object. Finally ModelArray class defined integrating slots together. done ModelArray() function. functions setups can found script R/ModelArray_Constructor.R","code":""},{"path":"https://pennlinc.github.io/ModelArray/articles/a05_doc_for_developer.html","id":"show-and-accessors-methods-of-modelarray-class","dir":"Articles","previous_headings":"","what":"Show and accessors methods of ModelArray class","title":"Developer documentation","text":"easily show access ModelArray object, adopt S4 Object Oriented Programming (OOP) model. End users R actually using S4 methods frequently. example, showing (summarized) content object, users simply enter name R console press “enter”. hood, uses generic show() method. showing ModelArray object, adopt way. show() already generic function, need setMethod() setup. S4 OOP model, users can easily access data need. current accessor functions accessing different slots ModelArray class’s: sources(): source filenames (e.g., list .mif files fixel data) scalars(): scalar matrix (matrices) results(): statistical result matrix matrices () use setMethod() define methods. Unlike show(), accessors generic yet, additional step setGeneric(). show accessors setups can found script R/ModelArray_S4Methods.R.","code":""},{"path":"https://pennlinc.github.io/ModelArray/articles/a05_doc_for_developer.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model fitting","title":"Developer documentation","text":"Functions ModelArray.lm() ModelArray.gam() model fitting. hood, functions iteratively call analyseOneElement.lm() analyseOneElement.gam() fitting one element, respectively. also facilitates parallel computing across elements requested. Besides existing functions linear models (ModelArray.lm()) GAMs (ModelArray.gam()), new functions diverse statistical models can added following structure . general structure model fitting functions ModelArray.<model_name>() ModelArray : sanity checks arguments Print important methods model fitting, method mgcv::gam() GAMs First, initialize: run analyseOneElement.<model_name>() get column names statistics output statistics; usually using element middle (instead first last element) avoid many NaNs data; Fit model element; Get necessary statistics via broom::tidy(), broom::glance(), /summary(). Flatten results one row data.frame element; add element ids; remove column names (’s list numeric now) save bit memory Return result element Concatenate results requested elements matrix elements statistics, add column names; now get final result data.frame p-value correction method, apply add values result data.frame Return result data.frame ModelArray.gam(), additional step one round iteration: Iteratively call analyseOneElement.<model_name>() providing reduced formula Get necessary statistics Compute delta adjusted R-squared partial R-squared; add previously got data.frame Therefore, might two rounds iterations model fitting ModelArray.gam(), depending number terms user requested changed.rsq.term.index. Functions mentioned section can found scripts R/analyse.R R/ModelArray_Constructor.R.","code":""},{"path":"https://pennlinc.github.io/ModelArray/articles/a05_doc_for_developer.html","id":"saving-statistical-results-to--hdf5-file-on-disk","dir":"Articles","previous_headings":"","what":"Saving statistical results to .hdf5 file on disk","title":"Developer documentation","text":"getting data.frame statistical results, users save original HDF5 file disk. function writeResults() located script R/ModelArray_Constructor.R","code":""},{"path":"https://pennlinc.github.io/ModelArray/articles/a05_doc_for_developer.html","id":"writing-tests-for-circleci","dir":"Articles","previous_headings":"","what":"Writing tests for CircleCI","title":"Developer documentation","text":"use Continuous Integration (CI) testing ensure stability quality assurance ModelArray. Therefore, modify source code ModelArray, important make sure add appropriate tests new modified functionality. test files located folder tests/testthat. commit pushed GitHub, CircleCI (CI testing platform) triggered build software run unit tests. tests serve goals : Run functions different scenarios (different requests) expect error. ensure new features added, run without error; ** scenarios, special data needed. example, testing NAs input data (volume data) Expect output data.frame contain column specific name, check dimensions output data.frame. ensure expected columns show . importantly, check values expected: statistical results calculated ModelArray fitting loop = calculated standard R. Developers can run tests locally see unit tests test file (tests/testthat folder) can run without errors: click “Run Test” button RStudio run test file. Check anything failed. details write unit tests + test , please check Testing chapters book “R Packages” written Hadley Wickham, Jennifer Bryan","code":"rm(list=ls()) devtools::load_all()"},{"path":[]},{"path":"https://pennlinc.github.io/ModelArray/articles/a06_faq.html","id":"what-kind-of-fixel-data-should-i-use","dir":"Articles","previous_headings":"Prepare your data for ModelArray","what":"What kind of fixel data should I use?","title":"FAQ","text":"using ModelArray, stage got fixel data every participant template space MRtrix following fixel-based analysis. use paper Dhollander et al., 2021 Fig.3. fixel-based analysis pipeline example, expect done step “Connectivity-based fixel smoothing”. use participant-level fixel data template space step fixel-wise statistical analysis ModelArray. expect file format mif.","code":""},{"path":"https://pennlinc.github.io/ModelArray/articles/a06_faq.html","id":"how-should-i-organize-the-data","dir":"Articles","previous_headings":"Prepare your data for ModelArray","what":"How should I organize the data?","title":"FAQ","text":"example data organization shown demo data (see vignette(\"a02_walkthrough\")) recommend. example fixel dataset, metric FDC. also metrics FC, may also folder FC CSV file cohort_FC_n100.csv myProject folder.","code":""},{"path":"https://pennlinc.github.io/ModelArray/articles/a06_faq.html","id":"what-are-the-requirements-of-the-csv-file","dir":"Articles","previous_headings":"Prepare your data for ModelArray","what":"What are the requirements of the CSV file?","title":"FAQ","text":"expect CSV file least contains two columns - see example vignette(\"a02_walkthrough\"), required columns highlighted bold italics: scalar_name, tells ModelArray metric analyzed source_file, tells ModelArray mif file used subject columns covariates may want include statistical model. order columns can changed.","code":""},{"path":[]},{"path":"https://pennlinc.github.io/ModelArray/articles/a06_faq.html","id":"how-many-cpu-cores-does-my-computer-have","dir":"Articles","previous_headings":"When using ModelArray.*() for statistical analysis","what":"How many CPU cores does my computer have?","title":"FAQ","text":"may check : parallel::detectCores()","code":""},{"path":"https://pennlinc.github.io/ModelArray/articles/basic_r_intro.html","id":"r-syntax","dir":"Articles","previous_headings":"","what":"R syntax","title":"An intro to R","text":"Dot “.” valid variable name function (e.g. variable “num.fixels”, function “ModelArray.lm()”) Syntax formula: example formula: ** can see define variable “FD”,“age” “sex”, ’s valid formula. ** Left hand side “~” dependent variable (y, response), righ hand side includes independent variables covariates","code":"formula <- FD ~ age + sex"},{"path":"https://pennlinc.github.io/ModelArray/articles/basic_r_intro.html","id":"prepare-the-phenotypes-data-frame-manipulations","dir":"Articles","previous_headings":"","what":"Prepare the phenotypes data.frame: manipulations","title":"An intro to R","text":"Users may want manipulate data.frame phenotypes passing ModelArray.lm() etc functions model fitting. Examples like de-mean rescale covariates. R package “dplyr” useful easy use manipulation.","code":"# install is first via: install.packages(\"dplyr\") library(dplyr)    # load into memory #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union"},{"path":"https://pennlinc.github.io/ModelArray/articles/basic_r_intro.html","id":"de-mean-and-rescale-covariates","dir":"Articles","previous_headings":"Prepare the phenotypes data.frame: manipulations","what":"De-mean and rescale covariates","title":"An intro to R","text":"TODO","code":""},{"path":"https://pennlinc.github.io/ModelArray/articles/basic_r_intro.html","id":"check-whether-the-model-is-well-conditioned","dir":"Articles","previous_headings":"Prepare the phenotypes data.frame: manipulations","what":"Check whether the model is well-conditioned","title":"An intro to R","text":"TODO","code":""},{"path":"https://pennlinc.github.io/ModelArray/articles/doc_for_developer.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Developer documentation","text":"ModelArray R package supports data HDF5 (.h5) file format. utilizes DelayedArray, HDF5Array, etc R packages, statistical analysis can performed without loading original data HDF5 file memory. makes ModelArray efficient memory usage. details, please see section “ModelArray Construction” . Methods showing accessing ModelArray object basic. Please see section “Show accessors methods ModelArray class” . key function ModelArray package perform statistical analysis. details, please see section “Model fitting” . Finally, rest sections describe important aspects, save statistical results .hdf5 file disk, deal missing value, etc.","code":""},{"path":"https://pennlinc.github.io/ModelArray/articles/doc_for_developer.html","id":"modelarray-construction","dir":"Articles","previous_headings":"","what":"ModelArray Construction","title":"Developer documentation","text":"first define class called ModelArray using setClass(). ModelArray object (.e. instance ModelArray class) several slots: sources: source filenames scalars: scalar matrix results: statistical results key feature ModelArray object memory efficient, taking couple KB memory. entire dataset .hdf5 file loaded memory; minimal information loaded. achieve , need ModelArraySeed(), utilizes HDF5Array::HDF5ArraySeed(), acting pointer .hdf5 file disk. make arrays ModelArray object look like “real” arrays, e.g. common array operations transpose can applied, utilize package DelayedArray. done ModelArray() function. functions setups can found script R/ModelArray_Constructor.R","code":""},{"path":"https://pennlinc.github.io/ModelArray/articles/doc_for_developer.html","id":"show-and-accessors-methods-of-modelarray-class","dir":"Articles","previous_headings":"","what":"Show and accessors methods of ModelArray class","title":"Developer documentation","text":"easily show access ModelArray object, adopt S4 methods. actually using S4 methods frequently. example, showing (summarized) content object, simply enter name R console press “enter”. means use generic show() method. showing ModelArray object, adopt way. show() already generic function, need setMethod() setup. accessors, accessing ModelArray class’s: source file information sources() scalar matrix scalars() statistical results () results() use setMethod() define methods. Unlike show(), accessors generic yet, developers additional step setGeneric(). show accessors setups can found script R/ModelArray_S4Methods.R.","code":""},{"path":"https://pennlinc.github.io/ModelArray/articles/doc_for_developer.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model fitting","title":"Developer documentation","text":"Functions ModelArray.lm() ModelArray.gam() model fitting. interfaces user. hood, functions iteratively call analyseOneElement.lm() analyseOneElement.gam() fitting one element, respectively. also facilitates parallel computing across elements requested. general structure model fitting ModelArray : sanity checks arguments Print important methods model fitting, method mgcv::gam() First, initialize: run analyseOneElement.<model_name>() get column names statistics output statistics; usually using first element; Fit model element; Get necessary statistics via broom::tidy(), broom::glance(), /summary(). Flatten results one row data.frame element; add element ids; remove column names (’s list numeric now) save bit memory Return result element Concatenate results requested elements, add column names; now get final result data.frame p-value correction method, apply add result data.frame Return result data.frame ModelArray.gam(), additional step one round iteration: Iteratively call analyseOneElement.<model_name>() reduced formula Get necessary statistics Compute delta adjusted R-squared partial R-squared; add previously got data.frame Therefore, two rounds iterations model fitting ModelArray.gam(), depending number terms user requested changed.rsq.term.index. Functions can found scripts R/analyse.R R/ModelArray_Constructor.R.","code":""},{"path":"https://pennlinc.github.io/ModelArray/articles/doc_for_developer.html","id":"saving-statistical-results-to--hdf5-file-on-disk","dir":"Articles","previous_headings":"","what":"Saving statistical results to .hdf5 file on disk","title":"Developer documentation","text":"getting data.frame statistical results, flush .hdf5 file disk. function writeResults() located script R/ModelArray_Constructor.R","code":""},{"path":[]},{"path":"https://pennlinc.github.io/ModelArray/articles/doc_for_developer.html","id":"missing-values-in-phenotypes-data-frame","dir":"Articles","previous_headings":"Dealing with missing values","what":"Missing values in phenotypes data.frame","title":"Developer documentation","text":"TODO","code":""},{"path":"https://pennlinc.github.io/ModelArray/articles/doc_for_developer.html","id":"missing-values-in-modelarray-scalar-data","dir":"Articles","previous_headings":"Dealing with missing values","what":"Missing values in ModelArray scalar data","title":"Developer documentation","text":"TODO","code":""},{"path":[]},{"path":"https://pennlinc.github.io/ModelArray/articles/installations.html","id":"set-up-a-conda-environment","dir":"Articles","previous_headings":"Directly installation from GitHub in R","what":"Set up a conda environment","title":"Installation","text":"first create conda environment modelarray installing ConFixel etc. ’ll install python version 3.9.","code":"foo@bar:~$ conda create --name modelarray python=3.9 foo@bar:~$ conda activate modelarray"},{"path":"https://pennlinc.github.io/ModelArray/articles/installations.html","id":"install-mrtrix","dir":"Articles","previous_headings":"Directly installation from GitHub in R","what":"Install MRtrix","title":"Installation","text":"ConFixel uses function mrconvert MRtrix, please make sure MRtrix installed. can either installed via conda conda environment just created, compiled source. See MRtrix’s webpage . Type mrview terminal check whether MRtrix installation successful.","code":""},{"path":"https://pennlinc.github.io/ModelArray/articles/installations.html","id":"install-hdf5-libraries-in-the-system","dir":"Articles","previous_headings":"Directly installation from GitHub in R","what":"Install hdf5 libraries in the system","title":"Installation","text":"ModelArray works HDF5 file format, need make sure necessary libraries HDF5 installed system.","code":""},{"path":"https://pennlinc.github.io/ModelArray/articles/installations.html","id":"linux-ubuntu-system","dir":"Articles","previous_headings":"Directly installation from GitHub in R > Install hdf5 libraries in the system","what":"Linux Ubuntu system","title":"Installation","text":"’re Linux Ubuntu system: First, please check libhdf5-dev installed system: got one line outputs, congrats, libhdf5-dev installed. Otherwise, please install via:","code":"foo@bar:~$ ldconfig -p | grep libhdf5* foo@bar:~$ sudo apt-get update -y foo@bar:~$ sudo apt-get install -y libhdf5-dev"},{"path":"https://pennlinc.github.io/ModelArray/articles/installations.html","id":"macos-system","dir":"Articles","previous_headings":"Directly installation from GitHub in R > Install hdf5 libraries in the system","what":"macOS system","title":"Installation","text":"Use Homebrew install: details may refer webpage ","code":"foo@bar:~$ brew install hdf5"},{"path":"https://pennlinc.github.io/ModelArray/articles/installations.html","id":"install-r-4-1-2","dir":"Articles","previous_headings":"Directly installation from GitHub in R","what":"Install R (>=4.1.2)","title":"Installation","text":"ModelArray requires R >=4.1.2. already installed , can skip step. several ways install R. Suppose path $HOME/myproject. TODO: - install R - either conda env existing one; requirement: >= 4.1.2) - (optional) install RStudio - install ModelArray - notes: using R conda env trouble installing dependent R packages - try install conda - install ConFixel (conda env)","code":""},{"path":"https://pennlinc.github.io/ModelArray/articles/installations.html","id":"using-modelarray-container","dir":"Articles","previous_headings":"","what":"Using ModelArray container","title":"Installation","text":"TODO…………","code":""},{"path":"https://pennlinc.github.io/ModelArray/articles/walkthrough.html","id":"step-1--prepare-your-data","dir":"Articles","previous_headings":"","what":"Step 1. Prepare your data","title":"Example walkthrough","text":"Assume ’re folder myProject. terminal console: Assume stage got fixel data MRtrix following fixel-based analysis. use paper Dhollander et al., 2021 Fig.3. fixel-based analysis pipeline example, expect done step “Connectivity-based fixel smoothing”. use subject-level fixel data template space step fixel-wise statistical analysis ModelArray. expect file format mif. , provide toy data (TODO: UPDATE __). can get :","code":"$ cd ~ $ mkdir myProject $ cd ~/myProject $ wget xxxxxx # TODO $ unzip xxxx # TODO $ rm xxx.zip   # TODO"},{"path":"https://pennlinc.github.io/ModelArray/articles/walkthrough.html","id":"step-1-1--overview-of-the-data-organization","dir":"Articles","previous_headings":"Step 1. Prepare your data","what":"Step 1.1. Overview of the data organization","title":"Example walkthrough","text":"can see, data organized following way: # TODO: update tree data organization recommend. example fixel dataset, metric FDC. metrics FD, may also folder FD CSV file cohort_FD.csv myProject folder. can see, besides subject-level fixel data, also index.mif directions.mif. two files provides important information fixel locations - see definitions .","code":"~/myProject | ├── cohort_FDC.csv    │ ├── FDC │   ├── index.mif │   ├── directions.mif |   ├── sub1_FDC.mif |   ├── sub2_FDC.mif |   ├── sub3_FDC.mif │   ├── ... └── ..."},{"path":"https://pennlinc.github.io/ModelArray/articles/walkthrough.html","id":"step-1-2--prepare-a-csv-file-of-cohort-phenotypes","dir":"Articles","previous_headings":"Step 1. Prepare your data","what":"Step 1.2. Prepare a CSV file of cohort phenotypes","title":"Example walkthrough","text":"addition fixel data, also need CSV file cohort phenotypes. file used ConFixel ModelArray. provide example CSV file: cohort_FDC.csv: # TODO: update table based real CSV file expect CSV file least contains two columns highlighted bold italics: scalar_name: call metric? source_file: filename subject-level fixel data. next step data conversion ConFixel, use ~/myProject main folder (relative_root), , need provide path starting folder FDC. columns optional - simply add covariates ’ll use statistical analysis ModelArray. order columns can changed.","code":""},{"path":"https://pennlinc.github.io/ModelArray/articles/walkthrough.html","id":"step-1-3--convert-data-into-a-hdf5-file-using-confixel","dir":"Articles","previous_headings":"Step 1. Prepare your data","what":"Step 1.3. Convert data into a HDF5 file using ConFixel","title":"Example walkthrough","text":"One reason ModelArray memory efficient takes advantages Hierarchical Data Format 5 (HDF5) file format. extension file format “h5”. HDF5 file stores large dataset hierarchically. now use ConFixel convert list mif files HDF5 file: terminal console: mentioned , take ~/myProject main folder, don’t need repeat filenames input output files anymore (.e. filenames relative path based main folder). running confixel, see moving progress bar. finishes, looks like : TODO: add screenshot confixel’s conversion! Now got converted HDF5 file folder ~/myProject.","code":"$ conda activate modelarray $ confixel \\     --index-file FDC/index.mif \\     --directions-file FDC/directions.mif \\     --cohort-file cohort_FDC.csv \\     --relative-root ~/myProject \\     --output-hdf5 FDC.h5"},{"path":"https://pennlinc.github.io/ModelArray/articles/walkthrough.html","id":"step-2--use-modelarray-to-perform-statistical-analysis","dir":"Articles","previous_headings":"","what":"Step 2. Use ModelArray to perform statistical analysis","title":"Example walkthrough","text":"next step use HDF5 file CSV file prepared perform statistical analysis R. Now launch R way preferred: * can launch RStudio * installed xxx conda: XXXXXXXXX * ModelArray installed conda environment, can simply open RStudio * clusters may provide good graphic access RStudio may hard install R packages. case, may use container provide. can start R session : singularity run --cleanenv ${modelarray_singularity} R. details please see installations page. commands Step 2 section run R. TODO ……","code":""},{"path":[]},{"path":"https://pennlinc.github.io/ModelArray/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Chenying Zhao. Author, maintainer. Tinashe Tapera. Author. Matthew Cieslak. Author. Theodore Satterthwaite. Author.","code":""},{"path":"https://pennlinc.github.io/ModelArray/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zhao C, Tapera T, Cieslak M, Satterthwaite T (2022). ModelArray: memory-efficient R package statistical analysis fixel data. R package version 0.1.0.9000, https://pennlinc.github.io/ModelArray.","code":"@Manual{,   title = {ModelArray: A memory-efficient R package for statistical analysis of fixel data},   author = {Chenying Zhao and Tinashe Tapera and Matthew Cieslak and Theodore Satterthwaite},   year = {2022},   note = {R package version 0.1.0.9000},   url = {https://pennlinc.github.io/ModelArray}, }"},{"path":"https://pennlinc.github.io/ModelArray/index.html","id":"modelarray","dir":"","previous_headings":"","what":"A memory-efficient R package for statistical analysis of fixel data","title":"A memory-efficient R package for statistical analysis of fixel data","text":"ModelArray memory-efficient R package statistical analysis fixel data. features include: Low memory requirement, even large datasets; present, ModelArray supports linear models well generalized additive models (GAM) without penalized splines, particularly useful studying nonlinear effects lifespan data. ModelArray extensible models; Easy use: set analysis just several lines codes.","code":""},{"path":"https://pennlinc.github.io/ModelArray/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A memory-efficient R package for statistical analysis of fixel data","text":"Please refer webpage Installation full guidance installation ModelArray companion python package ConFixel. important steps installing ModelArray : Make sure necessary libraries HDF5 - see section Install ModelArray GitHub - see section","code":""},{"path":"https://pennlinc.github.io/ModelArray/index.html","id":"how-to-use","dir":"","previous_headings":"","what":"How to use","title":"A memory-efficient R package for statistical analysis of fixel data","text":"Load ModelArray package R via: provide example walkthrough . documentations ModelArray functions, can: Either go webpage; R console, type: help(<function_name>). example: help(ModelArray.lm)","code":"library(ModelArray)"},{"path":"https://pennlinc.github.io/ModelArray/reference/ModelArray.gam.html","id":null,"dir":"Reference","previous_headings":"","what":"Run GAM for element-wise data — ModelArray.gam","title":"Run GAM for element-wise data — ModelArray.gam","text":"`ModelArray.gam` fits gam model elements requested, returns tibble data.frame requested model statistics.","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/ModelArray.gam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run GAM for element-wise data — ModelArray.gam","text":"","code":"ModelArray.gam(   formula,   data,   phenotypes,   scalar,   element.subset = NULL,   full.outputs = FALSE,   var.smoothTerms = c(\"statistic\", \"p.value\"),   var.parametricTerms = c(\"estimate\", \"statistic\", \"p.value\"),   var.model = c(\"dev.expl\"),   changed.rsq.term.index = NULL,   correct.p.value.smoothTerms = c(\"fdr\"),   correct.p.value.parametricTerms = c(\"fdr\"),   num.subj.lthr.abs = 10,   num.subj.lthr.rel = 0.2,   verbose = TRUE,   pbar = TRUE,   n_cores = 1,   ... )"},{"path":"https://pennlinc.github.io/ModelArray/reference/ModelArray.gam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run GAM for element-wise data — ModelArray.gam","text":"formula Formula (passed `mgcv::gam()`) data ModelArray class phenotypes data.frame cohort columns independent variables covariates added model. contains column called \"source_file\", column match data. scalar character. name element-wise scalar analysed element.subset list positive integers (min = 1, max = number elements). subset elements want run. Default `NULL`, .e. requesting elements `data`. full.outputs TRUE FALSE, Whether return full set outputs. FALSE, return requested arguments var.* correct.p.value.*; TRUE, arguments var.* ignored, return possible statistics var.* options requested arguments correct.p.value.*. var.smoothTerms list characters. list variables save smooth terms (got `broom::tidy(parametric = FALSE)`). Example smooth term: age formula \"outcome ~ s(age)\". See \"Details\" section . var.parametricTerms list characters. list variables save parametric terms (got `broom::tidy(parametric = TRUE)`). Example parametric term: sex formula \"outcome ~ s(age) + sex\". See \"Details\" section . var.model list characters. list variables save model (got `broom::glance()` `summary()`). See \"Details\" section . changed.rsq.term.index list (one several) positive integers. element list means -th term formula's right hand side term interest changed R-squared without . delta adjusted R-squared partial R-squared calculated term requested. Usually term interest smooth term, interaction term models interactions. correct.p.value.smoothTerms list characters. perform add column p.value correction smooth term. Default: \"fdr\". See \"Details\" section . correct.p.value.parametricTerms list characters. perform add column p.value correction parametric term. Default: \"fdr\". See \"Details\" section . num.subj.lthr.abs integer, lower threshold absolute number subjects. element, number subjects finite values (defined `.finite()`, .e. NaN NA Inf) h5 file > num.subj.lthr.abs, element run normally; otherwise, element skipped statistical outputs set NaN. Default 10. num.subj.lthr.rel value 0-1, lower threshold relative number subjects. Similar num.subj.lthr.abs, proportion subjects valid value > num.subj.lthr.rel, element run normally; otherwise, element skipped statistical outputs set NaN. Default 0.2. verbose TRUE FALSE, print verbose messages pbar TRUE FALSE, print progress bar n_cores Positive integer, number CPU cores run ... Additional arguments `mgcv::gam()`","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/ModelArray.gam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run GAM for element-wise data — ModelArray.gam","text":"Tibble summarized model statistics elements requested","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/ModelArray.gam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run GAM for element-wise data — ModelArray.gam","text":"may request returning specific statistical variables setting var.*, can get setting full.outputs=TRUE.  Note statistics covered full.outputs var.* ones broom::tidy(), broom::glance(), summary() , include delta adjusted R-squared partial R-squared corrected p-values. However FDR-corrected p-values (\"fdr\") generated default. List acceptable statistic names var.*: var.smoothTerms: c(\"edf\",\"ref.df\",\"statistic\",\"p.value\"); interpretation please see tidy.gam `parametric=FALSE`. var.parametricTerms: c(\"estimate\", \"std.error\",\"statistic\",\"p.value\"); interpretation please see tidy.gam `parametric=TRUE`. var.model: c(\"adj.r.squared\",\"dev.expl\", \"sp.criterion\", \"scale\", \"df\", \"logLik\",\"AIC\", \"BIC\", \"deviance\", \"df.residual\", \"nobs\"); \"adj.r.squared\" r.sq summary.gam; \"sp.criterion\" sp.criterion summary.gam; interpretation please see glance.gam summary.gam. Regarding formula: far kinds formula tested: formula smooth term, without interactions. Examples like y ~ s(x) + orderedFactor; y ~ s(x) + s(z) formula interaction, limited one interaction term, formats : Formula #1: y ~ orderedFactor + s(x) + s(x, =orderedFactor) + other_covariate, orderedFactor discrete variables generated `ordered`. interaction term displayed \"s_x_BYorderedFactor\" column name returned data.frame. may use function `generator_gamFormula_factorXsmooth()` generate one. Formula #2: y ~ ti(x) + ti(z) + ti(x,z) + other_covariate, x z continuous variables. interaction term displayed \"ti_x_z\" column name returned data.frame. may use function `generator_gamFormula_continuousInteraction()` generate one. may interested important term model. provide two ways quantification (see ). require running reduced model without term interest, thus take longer time run. can make request via argument changed.rsq.term.index, get quantifications. Delta adjusted R-squared (delta.adj.rsq) defined difference adjusted R-squared full model (full formula formula) reduced model (formula without term interest). Notice adjusted R-squared includes penalty model complexity. Partial R-squared (partial.rsq) defined : (sse.reduced.model - sse.full.model) / sse.reduced.model, sse error sum squares (, residual sum squares). quantifies amount variance response variable explained reduced model (model without term interest), can explained term interest full model. notes changed.rsq.term.index: requesting changed.rsq.term.index, fx set TRUE, degree freedom fixed. formula interactions, formula formats tested, values interaction term valid. delta.adj.rsq partial.rsq main effect (s(x) Formula #1) may \"functionally\" metrics, definitions changed reduced formula without main effect interaction term. p-value corrections (arguments correct.p.value.*), supported methods include methods `p.adjust.methods` except \"none\". can request one method. FDR-corrected p-values (\"fdr\") calculated default. Turn setting \"none\". Please notice different `ModelArray.lm`, p.value GAM model, \"correct.p.value.model\" GAM model.  Arguments num.subj.lthr.abs num.subj.lthr.rel mainly input data subject-specific masks, .e. currently volume data. fixel data, may ignore arguments.","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/ModelArray.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent element-wise scalar data and statistics. — ModelArray","title":"An S4 class to represent element-wise scalar data and statistics. — ModelArray","text":"S4 class represent element-wise scalar data statistics. Load element-wise data .h5 file ModelArray object","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/ModelArray.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An S4 class to represent element-wise scalar data and statistics. — ModelArray","text":"","code":"ModelArray(filepath, scalar_types = c(\"FD\"), analysis_names = c(\"myAnalysis\"))  ModelArray(filepath, scalar_types = c(\"FD\"), analysis_names = c(\"myAnalysis\"))"},{"path":"https://pennlinc.github.io/ModelArray/reference/ModelArray.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An S4 class to represent element-wise scalar data and statistics. — ModelArray","text":"filepath file scalar_types expected scalars analysis_names subfolder names results .h5 file","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/ModelArray.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An S4 class to represent element-wise scalar data and statistics. — ModelArray","text":"ModelArray object","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/ModelArray.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An S4 class to represent element-wise scalar data and statistics. — ModelArray","text":": Tips debugging:  run error: \"Error h(simpleError(msg, call)) : error evaluating argument 'seed' selecting method function 'DelayedArray': HDF5. Symbol table. open object.\" please check give correct \"scalar_types\" - check via rhdf5::h5ls(filename_for_h5)","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/ModelArray.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent element-wise scalar data and statistics. — ModelArray","text":"sources list source filenames scalars list element-wise scalar matrix results list statistical result matrix path Path h5 file disk","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/ModelArray.lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit linear model for element-wise data — ModelArray.lm","title":"Fit linear model for element-wise data — ModelArray.lm","text":"`ModelArray.lm` fits linear model (`stats::lm()`) elements requested, returns tibble dataframe requested model statistics.","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/ModelArray.lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit linear model for element-wise data — ModelArray.lm","text":"","code":"ModelArray.lm(   formula,   data,   phenotypes,   scalar,   element.subset = NULL,   full.outputs = FALSE,   var.terms = c(\"estimate\", \"statistic\", \"p.value\"),   var.model = c(\"adj.r.squared\", \"p.value\"),   correct.p.value.terms = c(\"fdr\"),   correct.p.value.model = c(\"fdr\"),   num.subj.lthr.abs = 10,   num.subj.lthr.rel = 0.2,   verbose = TRUE,   pbar = TRUE,   n_cores = 1,   ... )"},{"path":"https://pennlinc.github.io/ModelArray/reference/ModelArray.lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit linear model for element-wise data — ModelArray.lm","text":"formula Formula (passed `stats::lm()`) data ModelArray class phenotypes data.frame cohort columns independent variables covariates added model. contains column called \"source_file\", column match data. scalar character. name element-wise scalar analysed element.subset list positive integers (min = 1, max = number elements). subset elements want run. Default `NULL`, .e. requesting elements `data`. full.outputs TRUE FALSE, Whether return full set outputs. FALSE, return requested arguments var.* correct.p.value.*; TRUE, arguments var.* ignored, return possible statistics var.* options requested arguments correct.p.value.*. var.terms list characters. list variables save terms (got `broom::tidy()`). See \"Details\" section . var.model list characters. list variables save model (got `broom::glance()`). See \"Details\" section . correct.p.value.terms list characters. perform add column p.value correction term. Default: \"fdr\". See \"Details\" section . correct.p.value.model list characters. perform add column p.value correction model. Default: \"fdr\". See \"Details\" section . num.subj.lthr.abs integer, lower threshold absolute number subjects. element, number subjects finite values (defined `.finite()`, .e. NaN NA Inf) h5 file > num.subj.lthr.abs, element run normally; otherwise, element skipped statistical outputs set NaN. Default 10. num.subj.lthr.rel value 0-1, lower threshold relative number subjects. Similar num.subj.lthr.abs, proportion subjects valid value > num.subj.lthr.rel, element run normally; otherwise, element skipped statistical outputs set NaN. Default 0.2. verbose TRUE FALSE, print verbose message pbar TRUE FALSE, print progress bar n_cores Positive integer, number CPU cores run ... Additional arguments `stats::lm()`","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/ModelArray.lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit linear model for element-wise data — ModelArray.lm","text":"Tibble summarized model statistics elements requested","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/ModelArray.lm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit linear model for element-wise data — ModelArray.lm","text":"may request returning specific statistical variables setting var.*, can get setting full.outputs=TRUE.  Note statistics covered full.outputs var.* ones broom::tidy() broom::glance() , include corrected p-values. However FDR-corrected p-values (\"fdr\") generated default. List acceptable statistic names var.*: var.terms: c(\"estimate\",\"std.error\",\"statistic\",\"p.value\"); interpretation please see tidy.lm. var.model: c(\"r.squared\", \"adj.r.squared\", \"sigma\", \"statistic\", \"p.value\", \"df\", \"logLik\", \"AIC\", \"BIC\", \"deviance\", \"df.residual\", \"nobs\"); interpretation please see glance.lm. p-value corrections (arguments correct.p.value.*), supported methods include methods `p.adjust.methods` except \"none\". Can one method. FDR-corrected p-values (\"fdr\") calculated default. Turn setting \"none\".  Arguments num.subj.lthr.abs num.subj.lthr.rel mainly input data subject-specific masks, .e. currently volume data. fixel data, may ignore arguments.","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/analyseOneElement.gam.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit GAM for one element — analyseOneElement.gam","title":"Fit GAM for one element — analyseOneElement.gam","text":"`analyseOneElement.gam` fits GAM model one element data, returns requested model statistics.","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/analyseOneElement.gam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit GAM for one element — analyseOneElement.gam","text":"","code":"analyseOneElement.gam(   i_element,   formula,   modelarray,   phenotypes,   scalar,   var.smoothTerms,   var.parametricTerms,   var.model,   num.subj.lthr,   num.stat.output = NULL,   flag_initiate = FALSE,   flag_sse = FALSE,   ... )"},{"path":"https://pennlinc.github.io/ModelArray/reference/analyseOneElement.gam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit GAM for one element — analyseOneElement.gam","text":"i_element integer, i_th element, starting 1. initiating (flag_initiate = TRUE), use i_element=1 formula formula (passed `mgcv::gam()`) modelarray ModelArray class phenotypes data.frame cohort columns independent variables covariates added model scalar character. name element-wise scalar analysed var.smoothTerms list variables save smooth terms (got broom::tidy(parametric = FALSE)). Example smooth term: age formula \"outcome ~ s(age)\". var.parametricTerms list variables save parametric terms (got broom::tidy(parametric = TRUE)). Example parametric term: sex formula \"outcome ~ s(age) + sex\". var.model list variables save model (got broom::glance() summary()). num.subj.lthr minimal number subjects valid value input h5 file, .e. number subjects finite values (defined `.finite()`, .e. NaN NA Inf) h5 file > num.subj.lthr, element run normally; otherwise, element skipped statistical outputs set NaN. num.stat.output number output stat metrics (generating NaN stat # subjects meet criteria). includes column `element_id`. required flag_initiate = TRUE. flag_initiate TRUE FALSE, Whether initiate new analysis. TRUE, return column names etc used initiating data.frame; FALSE, return list requested statistic values. flag_sse TRUE FALSE, Whether calculate SSE (sum squared error) model (`model.sse`). SSE needed calculating partial R-squared. ... Additional arguments `mgcv::gam()`","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/analyseOneElement.gam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit GAM for one element — analyseOneElement.gam","text":"flag_initiate==TRUE, returns column names, list term names final results, attr.name sp.criterion; flag_initiate==FALSE, return list requested statistic values element.","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/analyseOneElement.gam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit GAM for one element — analyseOneElement.gam","text":"`ModelArray.gam` iteratively calls function get statistics requested elements.","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/analyseOneElement.lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit linear model for one element. — analyseOneElement.lm","title":"Fit linear model for one element. — analyseOneElement.lm","text":"`analyseOneElement.lm` fits linear model one element data, returns requested model statistics.","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/analyseOneElement.lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit linear model for one element. — analyseOneElement.lm","text":"","code":"analyseOneElement.lm(   i_element,   formula,   modelarray,   phenotypes,   scalar,   var.terms,   var.model,   num.subj.lthr,   num.stat.output = NULL,   flag_initiate = FALSE,   ... )"},{"path":"https://pennlinc.github.io/ModelArray/reference/analyseOneElement.lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit linear model for one element. — analyseOneElement.lm","text":"i_element integer, i_th element, starting 1. initiating (flag_initiate = TRUE), use i_element=1 formula Formula (passed `stats::lm()`) modelarray ModelArray class phenotypes data.frame cohort columns independent variables covariates added model. scalar character. name element-wise scalar analysed var.terms list characters. list variables save terms (got `broom::tidy()`). var.model list characters. list variables save model (got `broom::glance()`). num.subj.lthr minimal number subjects valid value input h5 file, .e. number subjects finite values (defined `.finite()`, .e. NaN NA Inf) h5 file > num.subj.lthr, element run normally; otherwise, element skipped statistical outputs set NaN. num.stat.output number output stat metrics (generating NaN stat # subjects meet criteria). includes column `element_id`. required flag_initiate = TRUE. flag_initiate TRUE FALSE, Whether initiate new analysis. TRUE, return column names etc used initiating data.frame; FALSE, return list requested statistic values. ... Additional arguments `stats::lm()`","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/analyseOneElement.lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit linear model for one element. — analyseOneElement.lm","text":"flag_initiate==TRUE, returns column names, list term names final results; flag_initiate==FALSE, return list requested statistic values element.","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/analyseOneElement.lm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit linear model for one element. — analyseOneElement.lm","text":"`ModelArray.lm` iteratively calls function get statistics requested elements.","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/check_validity_correctPValue.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the list of p-value correction methods are valid for a specific type of term/model. \nCan be used for any statistical model. As long as the p.value to be correct is named as ","title":"Check if the list of p-value correction methods are valid for a specific type of term/model. \nCan be used for any statistical model. As long as the p.value to be correct is named as ","text":"Check list p-value correction methods valid specific type term/model.  Can used statistical model. long p.value correct named \"p.value\".","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/check_validity_correctPValue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the list of p-value correction methods are valid for a specific type of term/model. \nCan be used for any statistical model. As long as the p.value to be correct is named as ","text":"","code":"check_validity_correctPValue(   correct.list,   name.correct.list,   var.list,   name.var.list )"},{"path":"https://pennlinc.github.io/ModelArray/reference/check_validity_correctPValue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the list of p-value correction methods are valid for a specific type of term/model. \nCan be used for any statistical model. As long as the p.value to be correct is named as ","text":"correct.list list correction methods type term/model name.correct.list name list correction methods type term/model var.list list statistics saved type term/model name.var.list name list statistics saved type term/model","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/checker_gam_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"A checker for formula in gam for ModelArray.gam()\nTODO: finish the description — checker_gam_formula","title":"A checker for formula in gam for ModelArray.gam()\nTODO: finish the description — checker_gam_formula","text":"checker formula gam ModelArray.gam() TODO: finish description","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/checker_gam_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A checker for formula in gam for ModelArray.gam()\nTODO: finish the description — checker_gam_formula","text":"","code":"checker_gam_formula(formula, gam.formula.breakdown, onemodel = NULL)"},{"path":"https://pennlinc.github.io/ModelArray/reference/checker_gam_s.html","id":null,"dir":"Reference","previous_headings":"","what":"Print out important arguments in smooth terms s() in mgcv::gam() formula\nref: https://www.rdocumentation.org/packages/mgcv/versions/1.8-38/topics/s\nTODO: finish the description — checker_gam_s","title":"Print out important arguments in smooth terms s() in mgcv::gam() formula\nref: https://www.rdocumentation.org/packages/mgcv/versions/1.8-38/topics/s\nTODO: finish the description — checker_gam_s","text":"Print important arguments smooth terms s() mgcv::gam() formula ref: https://www.rdocumentation.org/packages/mgcv/versions/1.8-38/topics/s TODO: finish description","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/checker_gam_s.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print out important arguments in smooth terms s() in mgcv::gam() formula\nref: https://www.rdocumentation.org/packages/mgcv/versions/1.8-38/topics/s\nTODO: finish the description — checker_gam_s","text":"","code":"checker_gam_s(ofInterest)"},{"path":"https://pennlinc.github.io/ModelArray/reference/checker_gam_s.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print out important arguments in smooth terms s() in mgcv::gam() formula\nref: https://www.rdocumentation.org/packages/mgcv/versions/1.8-38/topics/s\nTODO: finish the description — checker_gam_s","text":"ofInterest got via: gam.formula.breakdown <- mgcv::interpret.gam(formula); ofInterest <- gam.formula.breakdown$smooth.spec[[]]","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/checker_gam_t.html","id":null,"dir":"Reference","previous_headings":"","what":"Print out important arguments in smooth term te() or ti() or t2() in mgcv::gam() formula\nWhy a separate function is needed for t(), cannot using s(): in ofInterest, ","title":"Print out important arguments in smooth term te() or ti() or t2() in mgcv::gam() formula\nWhy a separate function is needed for t(), cannot using s(): in ofInterest, ","text":"Print important arguments smooth term te() ti() t2() mgcv::gam() formula separate function needed t(), using s(): ofInterest, \"fx\" \"fx\" t(), \"fixed\" s() - different. ref: https://www.rdocumentation.org/packages/mgcv/versions/1.8-38/topics/te /t2() TODO: finish description","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/checker_gam_t.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print out important arguments in smooth term te() or ti() or t2() in mgcv::gam() formula\nWhy a separate function is needed for t(), cannot using s(): in ofInterest, ","text":"","code":"checker_gam_t(FUN, ofInterest)"},{"path":"https://pennlinc.github.io/ModelArray/reference/checker_gam_t.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print out important arguments in smooth term te() or ti() or t2() in mgcv::gam() formula\nWhy a separate function is needed for t(), cannot using s(): in ofInterest, ","text":"FUN mgcv::te(), ti() t2() ofInterest got via: gam.formula.breakdown <- mgcv::interpret.gam(formula); ofInterest <- gam.formula.breakdown$smooth.spec[[]]","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/generator_gamFormula_continuousInteraction.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate GAM formula with continuous*continuous interaction — generator_gamFormula_continuousInteraction","title":"Generate GAM formula with continuous*continuous interaction — generator_gamFormula_continuousInteraction","text":"function generate formula following format: y ~ ti(x) + ti(z) + ti(x,z), y response.var, x cont1.var, z cont2.var. formula generated modified, e.g. adding covariates.","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/generator_gamFormula_continuousInteraction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate GAM formula with continuous*continuous interaction — generator_gamFormula_continuousInteraction","text":"","code":"generator_gamFormula_continuousInteraction(   response.var,   cont1.var,   cont2.var,   fx = TRUE,   k = NULL )"},{"path":"https://pennlinc.github.io/ModelArray/reference/generator_gamFormula_continuousInteraction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate GAM formula with continuous*continuous interaction — generator_gamFormula_continuousInteraction","text":"response.var character class, variable name response cont1.var character class, name first continuous variable cont2.var character class, name second continuous variable fx TRUE FALSE, used smooth term s(). Recommend TRUE. k integer, used smooth term including interaction term. NULL (entry), use default value mgcv::s()","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/generator_gamFormula_continuousInteraction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate GAM formula with continuous*continuous interaction — generator_gamFormula_continuousInteraction","text":"formula generated","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/generator_gamFormula_factorXsmooth.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate GAM formula with factor-smooth interaction — generator_gamFormula_factorXsmooth","title":"Generate GAM formula with factor-smooth interaction — generator_gamFormula_factorXsmooth","text":"function generate formula following format: y ~ orderedFactor + s(x) + s(x, =orderedFactor), y response.var, x smooth.var, orderedFactor factor.var - see factor.var . formula generated modified, e.g. adding covariates.","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/generator_gamFormula_factorXsmooth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate GAM formula with factor-smooth interaction — generator_gamFormula_factorXsmooth","text":"","code":"generator_gamFormula_factorXsmooth(   response.var,   factor.var,   smooth.var,   phenotypes,   reference.group = NULL,   prefix.ordered.factor = \"o\",   fx = TRUE,   k = NULL )"},{"path":"https://pennlinc.github.io/ModelArray/reference/generator_gamFormula_factorXsmooth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate GAM formula with factor-smooth interaction — generator_gamFormula_factorXsmooth","text":"response.var character class, variable name response factor.var character class, variable name factor. ordered factor. , generate new column `phenotypes`, requires `reference.group`. smooth.var character class, variable name smooth term main effect phenotypes data.frame class, cohort matrix columns independent variables (including factor.var smooth.var) added model reference.group character class, reference group ordered factor `factor.var`; required `factor.var` `phenotypes` ordered factor. prefix.ordered.factor character class, prefix ordered factor; required `factor.var` `phenotypes` ordered factor. fx TRUE FALSE, used smooth term s(). Recommend TRUE. k integer, used smooth term including interaction term. NULL (entry), use default value mgcv::s()","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/generator_gamFormula_factorXsmooth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate GAM formula with factor-smooth interaction — generator_gamFormula_factorXsmooth","text":"list, including: 1) formula generated; 2) data.frame phenotypes - updated argument factor.var ordered factor","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/numElementsTotal.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of elements in ModelArray — numElementsTotal","title":"Number of elements in ModelArray — numElementsTotal","text":"Returns number elements ModelArray, specific scalar","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/numElementsTotal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of elements in ModelArray — numElementsTotal","text":"","code":"numElementsTotal(modelarray, scalar_name = \"FD\")"},{"path":"https://pennlinc.github.io/ModelArray/reference/numElementsTotal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of elements in ModelArray — numElementsTotal","text":"modelarray ModelArray class scalar_name character, scalar name (one existing scalar modelarray)","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/numElementsTotal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of elements in ModelArray — numElementsTotal","text":"number elements ModelArray, specific scalar","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://pennlinc.github.io/ModelArray/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/printAdditionalArgu.html","id":null,"dir":"Reference","previous_headings":"","what":"print the additional arguments settings — printAdditionalArgu","title":"print the additional arguments settings — printAdditionalArgu","text":"print additional arguments settings","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/printAdditionalArgu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print the additional arguments settings — printAdditionalArgu","text":"","code":"printAdditionalArgu(   FUN,   argu_name,   dots,   message_default = NULL,   message_usr_input = NULL )"},{"path":"https://pennlinc.github.io/ModelArray/reference/printAdditionalArgu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print the additional arguments settings — printAdditionalArgu","text":"FUN function, e.g. mgcv::gam, without \"()\" argu_name argument name function message_default message default message_usr_input message describing user's input dots: list additional arguments","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/results-ModelArray-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Statistical results of an ModelArray object — results,ModelArray-method","title":"Statistical results of an ModelArray object — results,ModelArray-method","text":"Statistical results ModelArray object","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/results-ModelArray-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Statistical results of an ModelArray object — results,ModelArray-method","text":"","code":"# S4 method for ModelArray results(x, ...)"},{"path":"https://pennlinc.github.io/ModelArray/reference/results-ModelArray-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Statistical results of an ModelArray object — results,ModelArray-method","text":"x ModelArray object ... Additional arguments. Currently accept analysis name (character)","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/results-ModelArray-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Statistical results of an ModelArray object — results,ModelArray-method","text":"Statistical results ModelArray object","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/scalars-ModelArray-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Element-wise scalar data of an ModelArray object — scalars,ModelArray-method","title":"Element-wise scalar data of an ModelArray object — scalars,ModelArray-method","text":"Element-wise scalar data ModelArray object","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/scalars-ModelArray-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Element-wise scalar data of an ModelArray object — scalars,ModelArray-method","text":"","code":"# S4 method for ModelArray scalars(x, ...)"},{"path":"https://pennlinc.github.io/ModelArray/reference/scalars-ModelArray-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Element-wise scalar data of an ModelArray object — scalars,ModelArray-method","text":"x ModelArray object ... Additional arguments. Currently accept scalar name (character)","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/scalars-ModelArray-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Element-wise scalar data of an ModelArray object — scalars,ModelArray-method","text":"matrix element-wise scalar data: elements (row) source files (column).","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/show-ModelArray-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show ModelArray object — show,ModelArray-method","title":"Show ModelArray object — show,ModelArray-method","text":"Print basic information ModelArray object, including number source files, scalar names, analysis names.","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/show-ModelArray-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show ModelArray object — show,ModelArray-method","text":"","code":"# S4 method for ModelArray show(object)"},{"path":"https://pennlinc.github.io/ModelArray/reference/show-ModelArray-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show ModelArray object — show,ModelArray-method","text":"object ModelArray object","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/sources-ModelArray-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Source filenames of an ModelArray object — sources,ModelArray-method","title":"Source filenames of an ModelArray object — sources,ModelArray-method","text":"Source filenames ModelArray object","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/sources-ModelArray-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Source filenames of an ModelArray object — sources,ModelArray-method","text":"","code":"# S4 method for ModelArray sources(x)"},{"path":"https://pennlinc.github.io/ModelArray/reference/sources-ModelArray-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Source filenames of an ModelArray object — sources,ModelArray-method","text":"x ModelArray object","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/sources-ModelArray-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Source filenames of an ModelArray object — sources,ModelArray-method","text":"list source filenames","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/subjects-ModelArray-method.html","id":null,"dir":"Reference","previous_headings":"","what":"subjects of ModelArray — subjects,ModelArray-method","title":"subjects of ModelArray — subjects,ModelArray-method","text":"subjects ModelArray","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/subjects-ModelArray-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"subjects of ModelArray — subjects,ModelArray-method","text":"","code":"# S4 method for ModelArray subjects(x)"},{"path":"https://pennlinc.github.io/ModelArray/reference/writeResults.html","id":null,"dir":"Reference","previous_headings":"","what":"Write outputs from element-wise statistical analysis to the HDF5 file. — writeResults","title":"Write outputs from element-wise statistical analysis to the HDF5 file. — writeResults","text":"Create group named `analysis_name` HDF5 file, write statistical results data.frame (.e. one analysis) .","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/writeResults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write outputs from element-wise statistical analysis to the HDF5 file. — writeResults","text":"","code":"writeResults(   fn.output,   df.output,   analysis_name = \"myAnalysis\",   overwrite = TRUE )"},{"path":"https://pennlinc.github.io/ModelArray/reference/writeResults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write outputs from element-wise statistical analysis to the HDF5 file. — writeResults","text":"fn.output character, HDF5 (.h5) filename output df.output data.frame object element-wise statistical results, returned `ModelArray.lm()` etc analysis_name character, name results overwrite group analysis_name exists HDF5 file, whether overwrite (TRUE) (FALSE)","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/writeResults.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write outputs from element-wise statistical analysis to the HDF5 file. — writeResults","text":"debug tip: \"Error H5File.open(filename, mode, file_create_pl, file_access_pl)\", check message 'file directory'. Try absolute .h5 filename.","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/writeResults.old.html","id":null,"dir":"Reference","previous_headings":"","what":"Write outputs from fixel-based analysis out to the h5 file. Write one results (i.e. for one analysis) at a time. This is ","title":"Write outputs from fixel-based analysis out to the h5 file. Write one results (i.e. for one analysis) at a time. This is ","text":"Write outputs fixel-based analysis h5 file. Write one results (.e. one analysis) time. \".old\": writing results multiple rows one fixel","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/writeResults.old.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write outputs from fixel-based analysis out to the h5 file. Write one results (i.e. for one analysis) at a time. This is ","text":"","code":"writeResults.old(   modelarray,   data,   analysis_name = \"myAnalysis\",   flag_overwrite = TRUE )"},{"path":"https://pennlinc.github.io/ModelArray/reference/writeResults.old.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write outputs from fixel-based analysis out to the h5 file. Write one results (i.e. for one analysis) at a time. This is ","text":"modelarray ModelArray object data data.frame object model results fixel analysis_name subfolder name results, holding analysis results flag_overwrite analysis_name exists, whether overwrite ","code":""}]
