% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/analyse.R
\name{ModelArray.gam}
\alias{ModelArray.gam}
\title{Run GAM for element-wise data}
\usage{
ModelArray.gam(
  formula,
  data,
  phenotypes,
  scalar,
  element.subset = NULL,
  full.outputs = FALSE,
  var.smoothTerms = c("statistic", "p.value"),
  var.parametricTerms = c("estimate", "statistic", "p.value"),
  var.model = c("dev.expl"),
  changed.rsq.term.index = NULL,
  correct.p.value.smoothTerms = "none",
  correct.p.value.parametricTerms = "none",
  verbose = TRUE,
  pbar = TRUE,
  n_cores = 1,
  ...
)
}
\arguments{
\item{formula}{Formula (passed to `mgcv::gam()`)}

\item{data}{ModelArray class}

\item{phenotypes}{A data.frame of the cohort with columns of independent variables and covariates to be added to the model. It should contains a column called "source_file", and this column should match to that in \code{data}.}

\item{scalar}{A character. The name of the element-wise scalar to be analysed}

\item{element.subset}{A list of positive integers (min = 1, max = number of elements). The subset of elements you want to run. Default is `NULL`, i.e. requesting all elements in `data`.}

\item{full.outputs}{TRUE or FALSE, Whether to return full set of outputs. If FALSE, it will only return those listed in arguments \code{var.*}; if TRUE, arguments \code{var.*} will be ignored.}

\item{var.smoothTerms}{A list of characters. The list of variables to save for smooth terms (got from `broom::tidy(parametric = FALSE)`). Example smooth term: age in formula "outcome ~ s(age)". See "Details" section for more.}

\item{var.parametricTerms}{A list of characters. The list of variables to save for parametric terms (got from `broom::tidy(parametric = TRUE)`). Example parametric term: sex in formula "outcome ~ s(age) + sex". See "Details" section for more.}

\item{var.model}{A list of characters. The list of variables to save for the model (got from `broom::glance()` and `summary()`). See "Details" section for more.}

\item{changed.rsq.term.index}{A list of (one or several) positive integers. Each element in the list means the i-th term of the formula's right hand side as the term of interest for effect size. Effect size will be calculated for each of term requested. Positive integer or integer list. Usually term of interest is smooth term, or interaction term in models with interactions.}

\item{correct.p.value.smoothTerms}{A list of characters. To perform and add a column for p.value correction for each smooth term. See "Details" section for more.}

\item{correct.p.value.parametricTerms}{A list of characters. To perform and add a column for p.value correction for each parametric term. See "Details" section for more.}

\item{verbose}{TRUE or FALSE, to print verbose messages or not}

\item{pbar}{TRUE or FALSE, to print progress bar or not}

\item{n_cores}{Positive integer, The number of CPU cores to run with}

\item{...}{Additional arguments for `mgcv::gam()`}
}
\value{
Tibble with the summarized model statistics for all elements requested
}
\description{
`ModelArray.gam` fits gam model for each of elements requested, and returns a tibble dataframe of requested model statistics.
}
\details{
You may request returning specific statistical variables by setting \code{var.*}, or you can get all by setting \code{full.outputs=TRUE}. 
Note that statistics covered by \code{full.outputs} or \code{var.*} are the ones from broom::tidy(), broom::glance(), and summary() only, and do not include effect size or corrected p values.
List of acceptable statistic names for each of \code{var.*}:
\itemize{
 \item \code{var.smoothTerms}: c("edf","ref.df","statistic","p.value"); For interpretation please see `broom::tidy(parametric=FALSE)`.
 \item \code{var.parametricTerms}: c("estimate", "std.error","statistic","p.value"); For interpretation please see `broom::tidy(parametric=TRUE)`.
 \item \code{var.model}: c("adj.r.squared","dev.expl", "sp.criterion", "scale", "df", "logLik","AIC", "BIC", "deviance", "df.residual", "nobs"); "adj.r.squared" is \code{r.sq} from `summary()`; "sp.criterion" is \code{sp.criterion} from `summary()`; For interpretation please see `broom::glance()` and `summary()`.
}
Regarding formula: So far these kinds of formula are tested:
\itemize{
  \item formula with smooth term, but without any interactions. Examples like \code{y ~ s(x) + orderedFactor}; \code{y ~ s(x) + s(z)}
  \item formula with interaction, but limited to only one interaction term, and in the formats of:
  \itemize{
      \item Formula #1: \code{y ~ orderedFactor + s(x) + s(x, by=orderedFactor) + other_covariate}, where \code{orderedFactor} should be discrete variables and generated by `ordered`. The interaction term will be displayed as "s_x_BYorderedFactor" in the column name in returned data.frame. You may use function `generator_gamFormula_factorXsmooth()` to generate one.
      \item Formula #2: \code{y ~ ti(x) + ti(z) + ti(x,z) + other_covariate}, where \code{x} and \code{z} should be continuous variables. The interaction term will be displayed as "ti_x_z" in the column name in the returned data.frame. You may use function `generator_gamFormula_continuousInteraction()` to generate one.
  }
}
Effect size is calculated by the difference between adjusted R squared of full model (formula requested) and that of reduced model (formula without the term requested)
\itemize{
  \item When requesting effect size, \code{fx} should be set as \code{TRUE}, so that degree of freedom is fixed.
  \item For formula with interactions, only formula in above formats are tested, and only effect size for interaction term is validated. The effect size for main effect (such as s(x) in Formula #1) may not "functionally" be its effect size, as the definition should be changed to reduced formula without both main effect and interaction term.
}
For p-value corrections (arguments \code{correct.p.value.*}), supported methods include all methods in `p.adjust.methods` except "none". Can be more than one method. Turn it off by setting to "none".
Please notice that different from `ModelArray.lm`, there is no p.value for the GAM model, so no "correct.p.value.model" for GAM model.
}
