[{"path":[]},{"path":"https://pennlinc.github.io/ModelArray/articles/ModelArray_basics.html","id":"goals","dir":"Articles","previous_headings":"Concepts and Goals","what":"Goals","title":"ModelArray Quick Start","text":"general goal provide generalizable R package statistical analysis different modalities data, voxel-wise, vertex-wise, fixel-wise data. features include: Low memory requirement, scale number subjects Providing statistical models linear regression model generalized additive model (GAM), useful especially modeling age effects development aging Easy straightforward use just several lines R codes","code":""},{"path":"https://pennlinc.github.io/ModelArray/articles/ModelArray_basics.html","id":"elements","dir":"Articles","previous_headings":"Concepts and Goals","what":"Elements","title":"ModelArray Quick Start","text":"package, “element” general name one point data; voxel 3D images, vertex surface data, fixel fixel-based analysis. scalar value associated element. demographics phenotype data, can model scalar value independent variables covariates. treat element equally.","code":""},{"path":[]},{"path":"https://pennlinc.github.io/ModelArray/articles/ModelArray_basics.html","id":"load-data-using-modelarray","dir":"Articles","previous_headings":"Quick start: fixel-wise statistical analysis","what":"Load data using ModelArray()","title":"ModelArray Quick Start","text":"provide example .h5 data “inst/extdata”. Example data fixel-wise data generated ConFixel python package. shows 50 source files, scalars FD modelarray loaded.","code":"# file of example .h5, fixel-wise data h5_path <- system.file(\"extdata\", \"n50_fixels.h5\", package = \"ModelArray\") modelarray <- ModelArray(h5_path,                                 scalar_types = c(\"FD\"))  # if there is more than one metric, you can do: c(\"FD\", \"FDC\") modelarray # check what's in it     #> ModelArray located at /home/runner/work/_temp/Library/ModelArray/extdata/n50_fixels.h5 #>  #>   Source files:     50 #>   Scalars:          FD #>   Analyses:"},{"path":"https://pennlinc.github.io/ModelArray/articles/ModelArray_basics.html","id":"accessors-of-modelarray","dir":"Articles","previous_headings":"Quick start: fixel-wise statistical analysis","what":"Accessors of ModelArray","title":"ModelArray Quick Start","text":"access ModelArray’s slots:","code":"scalars(modelarray)[[\"FD\"]]   # FD data #> <182581 x 50> matrix of class DelayedMatrix and type \"double\": #>            FD/sub1_fd.mif  FD/sub2_fd.mif ... FD/sub49_fd.mif FD/sub50_fd.mif #>      [1,]      36.0214119      81.9753342   .        37.82116       237.40558 #>      [2,]    1046.6225586    1058.1074219   .      1085.59241       986.08856 #>      [3,]       0.2467898      83.6336441   .        20.79962       108.81217 #>      [4,]       0.6753999      72.3661575   .        13.40481       120.06551 #>      [5,]       0.2290502       1.7837602   .       132.53795        15.16265 #>       ...               .               .   .               .               . #> [182577,]      0.02690634     14.75695896   .       31.983732      150.156906 #> [182578,]      0.04722600     23.99450111   .       27.997149       83.266426 #> [182579,]      0.11819888     43.39178085   .       61.914310       99.171700 #> [182580,]     32.06180573     11.31695938   .       13.557989        3.398834 #> [182581,]      9.01556969     12.15083504   .       35.347015       21.815554 sources(modelarray)[[\"FD\"]]  # list of source filenames for FD data #>  [1] \"FD/sub1_fd.mif\"  \"FD/sub2_fd.mif\"  \"FD/sub3_fd.mif\"  \"FD/sub4_fd.mif\"  #>  [5] \"FD/sub5_fd.mif\"  \"FD/sub6_fd.mif\"  \"FD/sub7_fd.mif\"  \"FD/sub8_fd.mif\"  #>  [9] \"FD/sub9_fd.mif\"  \"FD/sub10_fd.mif\" \"FD/sub11_fd.mif\" \"FD/sub12_fd.mif\" #> [13] \"FD/sub13_fd.mif\" \"FD/sub14_fd.mif\" \"FD/sub15_fd.mif\" \"FD/sub16_fd.mif\" #> [17] \"FD/sub17_fd.mif\" \"FD/sub18_fd.mif\" \"FD/sub19_fd.mif\" \"FD/sub20_fd.mif\" #> [21] \"FD/sub21_fd.mif\" \"FD/sub22_fd.mif\" \"FD/sub23_fd.mif\" \"FD/sub24_fd.mif\" #> [25] \"FD/sub25_fd.mif\" \"FD/sub26_fd.mif\" \"FD/sub27_fd.mif\" \"FD/sub28_fd.mif\" #> [29] \"FD/sub29_fd.mif\" \"FD/sub30_fd.mif\" \"FD/sub31_fd.mif\" \"FD/sub32_fd.mif\" #> [33] \"FD/sub33_fd.mif\" \"FD/sub34_fd.mif\" \"FD/sub35_fd.mif\" \"FD/sub36_fd.mif\" #> [37] \"FD/sub37_fd.mif\" \"FD/sub38_fd.mif\" \"FD/sub39_fd.mif\" \"FD/sub40_fd.mif\" #> [41] \"FD/sub41_fd.mif\" \"FD/sub42_fd.mif\" \"FD/sub43_fd.mif\" \"FD/sub44_fd.mif\" #> [45] \"FD/sub45_fd.mif\" \"FD/sub46_fd.mif\" \"FD/sub47_fd.mif\" \"FD/sub48_fd.mif\" #> [49] \"FD/sub49_fd.mif\" \"FD/sub50_fd.mif\""},{"path":"https://pennlinc.github.io/ModelArray/articles/ModelArray_basics.html","id":"preparation-for-statistical-analysis","dir":"Articles","previous_headings":"Quick start: fixel-wise statistical analysis","what":"Preparation for statistical analysis","title":"ModelArray Quick Start","text":"perform statistical analysis, please provide .csv file subjects’ demographic phenotype data interested , data used independent variables coviariates model. easiest way simply use cohort .csv prepared ConFixel, add necessary demographic phenotype data additional column needed. requirement .csv: must column “source_file”, providing filename source image file. requirement consistent ConFixel. purpose sanity (consistency) check orders .h5 file .csv file. ModelArray.lm(), ModelArray.gam() etc functions can flexibly handle order changed: long source file lists phenotypes modelarray can matched (either without changing order phenotypes), functions matching find correct rows phenotypes. However matched, error thrown . Example : ++++ TODO: add table! needed, can manipulate data.frame “phenotypes” (e.g. demean, add new column, etc) via R packages “dplyr”. See R: intro.","code":"csv_path <- system.file(\"extdata\", \"n50_cohort.csv\", package = \"ModelArray\")  #  phenotypes <- read.csv(csv_path)    head(phenotypes) #>   subject_id      age sex scalar_name    source_file  factorA     factorB #> 1       sub1 22.88783   F          FD FD/sub1_fd.mif 22.16587  0.87416816 #> 2       sub2 18.88235   M          FD FD/sub2_fd.mif 19.16176 -1.66829817 #> 3       sub3 23.85117   F          FD FD/sub3_fd.mif 22.88838 -0.24118500 #> 4       sub4 25.41304   M          FD FD/sub4_fd.mif 24.05978 -0.09271979 #> 5       sub5 16.74746   F          FD FD/sub5_fd.mif 17.56059 -0.69380591 #> 6       sub6 23.77783   M          FD FD/sub6_fd.mif 22.83337 -0.86222583"},{"path":"https://pennlinc.github.io/ModelArray/articles/ModelArray_basics.html","id":"linear-regression","dir":"Articles","previous_headings":"Quick start: fixel-wise statistical analysis","what":"Linear regression","title":"ModelArray Quick Start","text":"Now, let’s perform linear regression metric FD (y) subject’s age, using ModelArray.lm(): statistics many , try default list statistics: may specifically interested several statistics: list possible p value correction method, see p.adjust.methods (except “none”). run across fixels, simply use default setting element.subset = NULL.","code":"formula <- FD ~ age mylm_fullOutputs <- ModelArray.lm(formula, modelarray, phenotypes, \"FD\",  # dependent variable                       element.subset = 1:100,  # let's check out first 100 fixels                       full.outputs = TRUE, # let's first view all statistics                       ) #> subset: default  #> weights: default  #> na.action: default  #> method: default  #> model: default  #> x: default  #> y: default  #> qr: default  #> singular.ok: default  #> contrasts: default  #> offset: default #> Fitting element-wise linear models for FD #> initiating.... #> looping across elements.... head(mylm_fullOutputs) #>   element_id Intercept.estimate age.estimate Intercept.std.error age.std.error #> 1          0          163.59704   -3.5529524            61.46826      2.834597 #> 2          1         1006.39639    1.9317271            90.07811      4.153935 #> 3          2          167.42774   -4.5542156            68.43827      3.156018 #> 4          3           52.28663    0.7978552            52.78984      2.434393 #> 5          4          177.63929   -4.4614559            57.91336      2.670664 #> 6          5         1086.78063   -0.2157015            84.56369      3.899639 #>   Intercept.statistic age.statistic Intercept.p.value age.p.value #> 1           2.6614879    -1.2534240      1.055048e-02   0.2161225 #> 2          11.1724856     0.4650354      5.938761e-15   0.6440089 #> 3           2.4464053    -1.4430259      1.814295e-02   0.1555078 #> 4           0.9904678     0.3277429      3.269124e-01   0.7445313 #> 5           3.0673281    -1.6705419      3.543869e-03   0.1013212 #> 6          12.8516222    -0.0553132      3.737785e-17   0.9561185 #>   model.r.squared model.adj.r.squared model.sigma model.statistic model.p.value #> 1    3.169332e-02          0.01152026    60.99555      1.57107176     0.2161225 #> 2    4.485167e-03         -0.01625473    89.38539      0.21625797     0.6440089 #> 3    4.157802e-02          0.02161090    67.91196      2.08232389     0.1555078 #> 4    2.232825e-03         -0.01855399    52.38387      0.10741542     0.7445313 #> 5    5.494529e-02          0.03525665    57.46799      2.79071018     0.1013212 #> 6    6.373655e-05         -0.02076827    83.91337      0.00305955     0.9561185 #>   model.df model.logLik model.AIC model.BIC model.deviance model.df.residual #> 1        1    -275.4664  556.9329  562.6689       178582.0                48 #> 2        1    -294.5742  595.1485  600.8845       383507.9                48 #> 3        1    -280.8370  567.6740  573.4100       221377.6                48 #> 4        1    -267.8563  541.7126  547.4487       131715.4                48 #> 5        1    -272.4878  550.9756  556.7116       158523.4                48 #> 6        1    -291.4156  588.8313  594.5673       337989.8                48 #>   model.nobs #> 1         50 #> 2         50 #> 3         50 #> 4         50 #> 5         50 #> 6         50 mylm_default <- ModelArray.lm(formula, modelarray, phenotypes, \"FD\", element.subset = 1:100,                         n_cores = 2,  # running on 2 CPU cores for speeding up                       ) #> subset: default  #> weights: default  #> na.action: default  #> method: default  #> model: default  #> x: default  #> y: default  #> qr: default  #> singular.ok: default  #> contrasts: default  #> offset: default #> Fitting element-wise linear models for FD #> initiating.... #> looping across elements.... head(mylm_default) #>   element_id Intercept.estimate age.estimate Intercept.statistic age.statistic #> 1          0          163.59704   -3.5529524           2.6614879    -1.2534240 #> 2          1         1006.39639    1.9317271          11.1724856     0.4650354 #> 3          2          167.42774   -4.5542156           2.4464053    -1.4430259 #> 4          3           52.28663    0.7978552           0.9904678     0.3277429 #> 5          4          177.63929   -4.4614559           3.0673281    -1.6705419 #> 6          5         1086.78063   -0.2157015          12.8516222    -0.0553132 #>   Intercept.p.value age.p.value model.adj.r.squared model.p.value #> 1      1.055048e-02   0.2161225          0.01152026     0.2161225 #> 2      5.938761e-15   0.6440089         -0.01625473     0.6440089 #> 3      1.814295e-02   0.1555078          0.02161090     0.1555078 #> 4      3.269124e-01   0.7445313         -0.01855399     0.7445313 #> 5      3.543869e-03   0.1013212          0.03525665     0.1013212 #> 6      3.737785e-17   0.9561185         -0.02076827     0.9561185 mylm <- ModelArray.lm(formula, modelarray, phenotypes, \"FD\", element.subset = 1:100,                        var.terms = c(\"estimate\", \"p.value\"), # statistics for terms such as intercept, age                       var.model = c(\"r.squared\", \"p.value\", \"AIC\"),    # statistics for the model                       correct.p.value.terms = c(\"fdr\",\"bonferroni\"),   # p value corrections for terms (i.e. age and intercept in our case)                       correct.p.value.model = \"fdr\",  # p value corrections for linear model                       n_cores = 2, ) #> subset: default  #> weights: default  #> na.action: default  #> method: default  #> model: default  #> x: default  #> y: default  #> qr: default  #> singular.ok: default  #> contrasts: default  #> offset: default #> Fitting element-wise linear models for FD #> initiating.... #> looping across elements.... head(mylm) #>   element_id Intercept.estimate age.estimate Intercept.p.value #> 1          0          163.59704   -3.5529524      1.055048e-02 #> 2          1         1006.39639    1.9317271      5.938761e-15 #> 3          2          167.42774   -4.5542156      1.814295e-02 #> 4          3           52.28663    0.7978552      3.269124e-01 #> 5          4          177.63929   -4.4614559      3.543869e-03 #> 6          5         1086.78063   -0.2157015      3.737785e-17 #>   Intercept.p.value.bonferroni Intercept.p.value.fdr age.p.value #> 1                 1.000000e+00          4.396032e-02   0.2161225 #> 2                 5.938761e-13          1.484690e-13   0.6440089 #> 3                 1.000000e+00          6.479626e-02   0.1555078 #> 4                 1.000000e+00          4.301479e-01   0.7445313 #> 5                 3.543869e-01          1.968816e-02   0.1013212 #> 6                 3.737785e-15          1.868892e-15   0.9561185 #>   age.p.value.bonferroni age.p.value.fdr model.r.squared model.p.value #> 1                      1       0.8727231    3.169332e-02     0.2161225 #> 2                      1       0.9612073    4.485167e-03     0.6440089 #> 3                      1       0.8727231    4.157802e-02     0.1555078 #> 4                      1       0.9756312    2.232825e-03     0.7445313 #> 5                      1       0.8727231    5.494529e-02     0.1013212 #> 6                      1       0.9756312    6.373655e-05     0.9561185 #>   model.p.value.fdr model.AIC #> 1         0.8727231  556.9329 #> 2         0.9612073  595.1485 #> 3         0.8727231  567.6740 #> 4         0.9756312  541.7126 #> 5         0.8727231  550.9756 #> 6         0.9756312  588.8313"},{"path":"https://pennlinc.github.io/ModelArray/articles/ModelArray_basics.html","id":"gam---generalized-additive-model","dir":"Articles","previous_headings":"Quick start: fixel-wise statistical analysis","what":"GAM - Generalized additive model","title":"ModelArray Quick Start","text":"Modelling age effect GAM often useful developing population GAM’s flexibility. Running ModelArray.gam() similar ModelArray.lm(): can also set full.outputs=TRUE request statistics (except p.value corrections effect size - see ). can specify specific statistic terms interested assigning values var.smoothTerms, var.parametricTerms, var.model: can also run p value correction. Notice argument names ModelArray.gam bit different ModelArray.lm(). addition, can also request calculating effect size specific term, usually smooth term. Effect size term defined difference adjusted R squared full model (formula requested) reduced model (formula without requested term).","code":"formula <- FD ~ s(age, k=4, fx=TRUE) + sex  # we add sex as a covariate mygam <- ModelArray.gam(formula, data = modelarray, phenotypes = phenotypes, scalar = \"FD\", element.subset = 1:100,                         n_cores = 2, pbar = TRUE) #> The formula requested: FD ~ s(age, k = 4, fx = TRUE) + sex  #> s(age):   k = 4;   fx = TRUE;   bs = tp (default) #> method: default #> Fitting element-wise GAMs for FD #> initiating.... #> looping across elements.... head(mygam) #>   element_id s_age.statistic s_age.p.value Intercept.estimate sexM.estimate #> 1          0       1.2306636    0.30963368           68.99361     36.640118 #> 2          1       2.2871191    0.09143455         1065.70220    -35.661635 #> 3          2       1.1269130    0.34827798           74.01208     -8.730507 #> 4          3       0.8239727    0.48756102           62.10926     14.615306 #> 5          4       2.1823940    0.10321383           89.36170    -15.023467 #> 6          5       1.9297905    0.13831236         1086.74460     -9.190355 #>   Intercept.statistic sexM.statistic Intercept.p.value sexM.p.value #> 1            5.726418      2.1235803      7.940891e-07   0.03923706 #> 2           61.504732     -1.4371812      4.531281e-45   0.15758379 #> 3            5.292183     -0.4359225      3.457228e-06   0.66497706 #> 4            5.870646      0.9646617      4.856860e-07   0.33986996 #> 5            7.777202     -0.9130189      7.287228e-10   0.36609851 #> 6           66.163570     -0.3907161      1.756068e-46   0.69785074 #>   model.dev.expl #> 1     0.13701296 #> 2     0.14551292 #> 3     0.07159834 #> 4     0.07036785 #> 5     0.13702724 #> 6     0.12488886 mygam_specific <- ModelArray.gam(formula, data = modelarray, phenotypes = phenotypes, scalar = \"FD\", element.subset = 1:100,                           var.smoothTerms = c(\"p.value\"),  # this is for smooth term, e.g. s(age) in our case                           var.parametricTerms = c(\"estimate\"),   # this is for parametric term, e.g. sex in our case                           var.model = c(\"adj.r.squared\", \"dev.expl\"),  # this is for the model                         n_cores = 2, pbar = TRUE) #> The formula requested: FD ~ s(age, k = 4, fx = TRUE) + sex  #> s(age):   k = 4;   fx = TRUE;   bs = tp (default) #> method: default #> Fitting element-wise GAMs for FD #> initiating.... #> looping across elements.... head(mygam_specific) #>   element_id s_age.p.value Intercept.estimate sexM.estimate model.adj.r.squared #> 1          0    0.30963368           68.99361     36.640118          0.06030300 #> 2          1    0.09143455         1065.70220    -35.661635          0.06955851 #> 3          2    0.34827798           74.01208     -8.730507         -0.01092625 #> 4          3    0.48756102           62.10926     14.615306         -0.01226612 #> 5          4    0.10321383           89.36170    -15.023467          0.06031855 #> 6          5    0.13831236         1086.74460     -9.190355          0.04710121 #>   model.dev.expl #> 1     0.13701296 #> 2     0.14551292 #> 3     0.07159834 #> 4     0.07036785 #> 5     0.13702724 #> 6     0.12488886 mygam_pValueCorrect <- ModelArray.gam(formula, data = modelarray, phenotypes = phenotypes, scalar = \"FD\", element.subset = 1:100,                                       # we use default list of statistics output here                                       correct.p.value.smoothTerms = c(\"fdr\",\"bonferroni\"),  # for smooth terms, i.e. s(age) in our case                                       correct.p.value.parametricTerms = c(\"bonferroni\"),  # for parametric terms, i.e. sex (and intercept) in our case                                       # notice that there is no correction for model, as there is no p.value for GAM model                                       n_cores = 2, pbar = TRUE) #> The formula requested: FD ~ s(age, k = 4, fx = TRUE) + sex  #> s(age):   k = 4;   fx = TRUE;   bs = tp (default) #> method: default #> Fitting element-wise GAMs for FD #> initiating.... #> looping across elements.... mygam_effectSize <- ModelArray.gam(formula, data = modelarray, phenotypes = phenotypes, scalar = \"FD\", element.subset = 1:100,                           var.smoothTerms = c(), var.parametricTerms = c(), var.model = c(\"adj.r.squared\"),                             eff.size.term.index = c(1),   # requesting effect size for the 1st term on right hand side of formula, i.e. s(age) in this case                         n_cores = 2, pbar = TRUE) #> The formula requested: FD ~ s(age, k = 4, fx = TRUE) + sex  #> s(age):   k = 4;   fx = TRUE;   bs = tp (default) #> method: default #> will get effect size (eff.size) so the execution time will be longer. #> Fitting element-wise GAMs for FD #> initiating.... #> looping across elements.... #> Getting the effect size: running the reduced model... #> * Getting effect size for term: s(age, k = 4, fx = TRUE) via reduced model as below; will show up as s_age in final dataframe #> FD ~ sex  head(mygam_effectSize) #>   element_id model.adj.r.squared s_age.eff.size #> 1          0          0.06030300    0.013547120 #> 2          1          0.06955851    0.074849313 #> 3          2         -0.01092625    0.008018731 #> 4          3         -0.01226612   -0.011136655 #> 5          4          0.06031855    0.069442111 #> 6          5          0.04710121    0.055374767"},{"path":"https://pennlinc.github.io/ModelArray/articles/ModelArray_basics.html","id":"write-the-results","dir":"Articles","previous_headings":"Quick start: fixel-wise statistical analysis","what":"Write the results","title":"ModelArray Quick Start","text":"Finally, can write results (data frame statistics) back .h5 file. can reload .h5 file check results: access results, simply use results():","code":"# it's not necessary to make a copy of original .h5 file as we are doing here - you can write the results into original one. Here we make a copy only not to overwrite the example data we provide in the package. h5_output_path <- gsub(\".h5\",\"_output.h5\",h5_path) file.copy(from=h5_path, to=h5_output_path, overwrite = TRUE, copy.mode = TRUE, copy.date = TRUE) #> [1] TRUE modelarray_output <- ModelArray(filepath = h5_output_path, scalar_types = \"FD\")  # write linear model results: writeResults(h5_output_path, df.output = mylm,  # the results data.frame you got              analysis_name=\"result_lm\", # give the results a name - you will use this name again when converting back to .mif in ConFixel              overwrite=TRUE)  # if there is an existing result with the same name in .h5, overwrite it  # write GAM results: writeResults(h5_output_path, df.output = mygam_specific,                analysis_name=\"result_gam\",               overwrite=TRUE) modelarray_new <- ModelArray(filepath = h5_output_path, scalar_types = \"FD\",                              analysis_names = c(\"result_lm\", \"result_gam\"))   # you can load more than one result at a time results(modelarray_new)[[\"result_lm\"]]$results_matrix #> <100 x 13> matrix of class DelayedMatrix and type \"double\": #>                element_id Intercept.estimate ...  model.p.value.fdr #>   [1,]            0.00000          163.59704   .          0.8727231 #>   [2,]            1.00000         1006.39639   .          0.9612073 #>   [3,]            2.00000          167.42774   .          0.8727231 #>   [4,]            3.00000           52.28663   .          0.9756312 #>   [5,]            4.00000          177.63929   .          0.8727231 #>    ...                  .                  .   .                  . #>  [96,]           95.00000          125.88592   .          0.9160308 #>  [97,]           96.00000           78.22538   .          0.9756312 #>  [98,]           97.00000          181.18603   .          0.8727231 #>  [99,]           98.00000          109.03199   .          0.9227030 #> [100,]           99.00000          298.71128   .          0.8727231 #>                 model.AIC #>   [1,]        556.9328521 #>   [2,]        595.1484727 #>   [3,]        567.6739667 #>   [4,]        541.7126248 #>   [5,]        550.9755709 #>    ...                  . #>  [96,]        552.8348351 #>  [97,]        552.3188260 #>  [98,]        555.4548211 #>  [99,]        569.1791464 #> [100,]        616.8408020 results(modelarray_new)[[\"result_gam\"]]$results_matrix #> <100 x 6> matrix of class DelayedMatrix and type \"double\": #>                 element_id       s_age.p.value ... model.adj.r.squared #>   [1,]          0.00000000          0.30963368   .          0.06030300 #>   [2,]          1.00000000          0.09143455   .          0.06955851 #>   [3,]          2.00000000          0.34827798   .         -0.01092625 #>   [4,]          3.00000000          0.48756102   .         -0.01226612 #>   [5,]          4.00000000          0.10321383   .          0.06031855 #>    ...                   .                   .   .                   . #>  [96,]          95.0000000           0.6715018   .        -0.044707964 #>  [97,]          96.0000000           0.8544679   .        -0.070146268 #>  [98,]          97.0000000           0.3629401   .        -0.010947839 #>  [99,]          98.0000000           0.3745892   .        -0.008952404 #> [100,]          99.0000000           0.0813061   .         0.068797134 #>             model.dev.expl #>   [1,]          0.13701296 #>   [2,]          0.14551292 #>   [3,]          0.07159834 #>   [4,]          0.07036785 #>   [5,]          0.13702724 #>    ...                   . #>  [96,]         0.040574319 #>  [97,]         0.017212611 #>  [98,]         0.071578515 #>  [99,]         0.073411057 #> [100,]         0.144813694"},{"path":"https://pennlinc.github.io/ModelArray/articles/basic_r_intro.html","id":"r-syntax","dir":"Articles","previous_headings":"","what":"R syntax","title":"An intro to R","text":"Dot “.” valid variable name function (e.g. variable “num.fixels”, function “ModelArray.lm()”) Syntax formula: example formula: ** can see define variable “FD”,“age” “sex”, ’s valid formula. ** Left hand side “~” dependent variable (y, response), righ hand side includes independent variables covariates","code":"formula <- FD ~ age + sex"},{"path":"https://pennlinc.github.io/ModelArray/articles/basic_r_intro.html","id":"prepare-the-phenotypes-data-frame-manipulations","dir":"Articles","previous_headings":"","what":"Prepare the phenotypes data.frame: manipulations","title":"An intro to R","text":"Users may want manipulate data.frame phenotypes passing ModelArray.lm() etc functions model fitting. Examples like de-mean rescale covariates. R package “dplyr” useful easy use manipulation.","code":"# install is first via: install.packages(\"dplyr\") library(dplyr)    # load into memory #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union"},{"path":"https://pennlinc.github.io/ModelArray/articles/basic_r_intro.html","id":"de-mean-and-rescale-covariates","dir":"Articles","previous_headings":"Prepare the phenotypes data.frame: manipulations","what":"De-mean and rescale covariates","title":"An intro to R","text":"TODO","code":""},{"path":"https://pennlinc.github.io/ModelArray/articles/basic_r_intro.html","id":"check-whether-the-model-is-well-conditioned","dir":"Articles","previous_headings":"Prepare the phenotypes data.frame: manipulations","what":"Check whether the model is well-conditioned","title":"An intro to R","text":"TODO","code":""},{"path":"https://pennlinc.github.io/ModelArray/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"First Last. Author, maintainer.","code":""},{"path":"https://pennlinc.github.io/ModelArray/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Last F (2022). ModelArray: interface fixel data storage, access, analysis HDF5 backend. R package version 0.0.0.1, https://pennlinc.github.io/ModelArray.","code":"@Manual{,   title = {ModelArray: An interface for fixel data storage, access, and analysis through a HDF5 backend},   author = {First Last},   year = {2022},   note = {R package version 0.0.0.1},   url = {https://pennlinc.github.io/ModelArray}, }"},{"path":"https://pennlinc.github.io/ModelArray/index.html","id":"modelarray","dir":"","previous_headings":"","what":"An interface for fixel data storage, access, and analysis through a HDF5 backend","title":"An interface for fixel data storage, access, and analysis through a HDF5 backend","text":"goal ModelArray …","code":""},{"path":"https://pennlinc.github.io/ModelArray/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An interface for fixel data storage, access, and analysis through a HDF5 backend","text":"install ModelArray R package, using Linux system, please check libhdf5-dev installed system: got one line outputs, congrats, libhdf5-dev installed. Otherwise, please install . Ubuntu user, may install via: setting libhdf5 , can install released version ModelArray CRAN : development version GitHub :","code":"foo@bar:~$ ldconfig -p | grep libhdf5* foo@bar:~$ sudo apt-get update -y foo@bar:~$ sudo apt-get install -y libhdf5-dev install.packages(\"ModelArray\") # install.packages(\"devtools\") devtools::install_github(\"PennLINC/ModelArray\")"},{"path":"https://pennlinc.github.io/ModelArray/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"An interface for fixel data storage, access, and analysis through a HDF5 backend","text":"basic example shows solve common problem: special using README.Rmd instead just README.md? can include R chunks like : ’ll still need render README.Rmd regularly, keep README.md --date. devtools::build_readme() handy . also use GitHub Actions re-render README.Rmd every time push. example workflow can found : https://github.com/r-lib/actions/tree/master/examples. can also embed plots, example:  case, don’t forget commit push resulting figure files, display GitHub CRAN.","code":"library(ModelArray) ## basic example code summary(cars) #>      speed           dist        #>  Min.   : 4.0   Min.   :  2.00   #>  1st Qu.:12.0   1st Qu.: 26.00   #>  Median :15.0   Median : 36.00   #>  Mean   :15.4   Mean   : 42.98   #>  3rd Qu.:19.0   3rd Qu.: 56.00   #>  Max.   :25.0   Max.   :120.00"},{"path":"https://pennlinc.github.io/ModelArray/reference/ModelArray.gam.html","id":null,"dir":"Reference","previous_headings":"","what":"Run GAM for element-wise data — ModelArray.gam","title":"Run GAM for element-wise data — ModelArray.gam","text":"`ModelArray.gam` fits gam model elements requested, returns tibble dataframe requested model statistics.","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/ModelArray.gam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run GAM for element-wise data — ModelArray.gam","text":"","code":"ModelArray.gam(   formula,   data,   phenotypes,   scalar,   element.subset = NULL,   full.outputs = FALSE,   var.smoothTerms = c(\"statistic\", \"p.value\"),   var.parametricTerms = c(\"estimate\", \"statistic\", \"p.value\"),   var.model = c(\"dev.expl\"),   eff.size.term.index = NULL,   correct.p.value.smoothTerms = \"none\",   correct.p.value.parametricTerms = \"none\",   verbose = TRUE,   pbar = TRUE,   n_cores = 1,   ... )"},{"path":"https://pennlinc.github.io/ModelArray/reference/ModelArray.gam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run GAM for element-wise data — ModelArray.gam","text":"formula Formula (passed `mgcv::gam()`) data ModelArray class phenotypes data.frame cohort columns independent variables covariates added model. contains column called \"source_file\", column match data. scalar character. name element-wise scalar analysed element.subset list positive integers (min = 1, max = number elements). subset elements want run. Default `NULL`, .e. requesting elements `data`. full.outputs TRUE FALSE, Whether return full set outputs. FALSE, return listed arguments var.*; TRUE, arguments var.* ignored. var.smoothTerms list characters. list variables save smooth terms (got `broom::tidy(parametric = FALSE)`). Example smooth term: age formula \"outcome ~ s(age)\". See \"Details\" section . var.parametricTerms list characters. list variables save parametric terms (got `broom::tidy(parametric = TRUE)`). Example parametric term: sex formula \"outcome ~ s(age) + sex\". See \"Details\" section . var.model list characters. list variables save model (got `broom::glance()` `summary()`). See \"Details\" section . eff.size.term.index list (one several) positive integers. element list means -th term formula's right hand side term interest effect size. Effect size calculated term requested. Positive integer integer list. Usually term interest smooth term, interaction term models interactions. correct.p.value.smoothTerms list characters. perform add column p.value correction smooth term. See \"Details\" section . correct.p.value.parametricTerms list characters. perform add column p.value correction parametric term. See \"Details\" section . verbose TRUE FALSE, print verbose messages pbar TRUE FALSE, print progress bar n_cores Positive integer, number CPU cores run ... Additional arguments `mgcv::gam()`","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/ModelArray.gam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run GAM for element-wise data — ModelArray.gam","text":"Tibble summarized model statistics elements requested","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/ModelArray.gam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run GAM for element-wise data — ModelArray.gam","text":"may request returning specific statistical variables setting var.*, can get setting full.outputs=TRUE.  Note statistics covered full.outputs var.* ones broom::tidy(), broom::glance(), summary() , include effect size corrected p values. List acceptable statistic names var.*: var.smoothTerms: c(\"edf\",\"ref.df\",\"statistic\",\"p.value\"); interpretation please see `broom::tidy(parametric=FALSE)`. var.parametricTerms: c(\"estimate\", \"std.error\",\"statistic\",\"p.value\"); interpretation please see `broom::tidy(parametric=TRUE)`. var.model: c(\"adj.r.squared\",\"dev.expl\", \"sp.criterion\", \"scale\", \"df\", \"logLik\",\"AIC\", \"BIC\", \"deviance\", \"df.residual\", \"nobs\"); \"adj.r.squared\" r.sq `summary()`; \"sp.criterion\" sp.criterion `summary()`; interpretation please see `broom::glance()` `summary()`. Regarding formula: far kinds formula tested: formula smooth term, without interactions. Examples like y ~ s(x) + orderedFactor; y ~ s(x) + s(z) formula interaction, limited one interaction term, formats : Formula #1: y ~ orderedFactor + s(x) + s(x, =orderedFactor) + other_covariate, orderedFactor discrete variables generated `ordered`. interaction term displayed \"s_x_BYorderedFactor\" column name returned data.frame. may use function `generator_gamFormula_factorXsmooth()` generate one. Formula #2: y ~ ti(x) + ti(z) + ti(x,z) + other_covariate, x z continuous variables. interaction term displayed \"ti_x_z\" column name returned data.frame. may use function `generator_gamFormula_continuousInteraction()` generate one. Effect size calculated difference adjusted R squared full model (formula requested) reduced model (formula without term requested) requesting effect size, fx set TRUE, degree freedom fixed. formula interactions, formula formats tested, effect size interaction term validated. effect size main effect (s(x) Formula #1) may \"functionally\" effect size, definition changed reduced formula without main effect interaction term. p-value corrections (arguments correct.p.value.*), supported methods include methods `p.adjust.methods` except \"none\". Can one method. Turn setting \"none\". Please notice different `ModelArray.lm`, p.value GAM model, \"correct.p.value.model\" GAM model.","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/ModelArray.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent element-wise scalar data and statistics. — ModelArray","title":"An S4 class to represent element-wise scalar data and statistics. — ModelArray","text":"S4 class represent element-wise scalar data statistics. Load element-wise data .h5 file ModelArray object Tips debugging:  run error: \"Error h(simpleError(msg, call)) : error evaluating argument 'seed' selecting method function 'DelayedArray': HDF5. Symbol table. open object.\" please check give correct \"scalar_types\" - check via h5ls(filename_for_h5) TODO: FUTURE, SCALAR_TYPES ANALYSIS_NAMES AUTOMATICALLY DETECTED!","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/ModelArray.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An S4 class to represent element-wise scalar data and statistics. — ModelArray","text":"","code":"ModelArray(filepath, scalar_types = c(\"FD\"), analysis_names = c(\"myAnalysis\"))  ModelArray(filepath, scalar_types = c(\"FD\"), analysis_names = c(\"myAnalysis\"))"},{"path":"https://pennlinc.github.io/ModelArray/reference/ModelArray.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An S4 class to represent element-wise scalar data and statistics. — ModelArray","text":"filepath file scalar_types expected scalars analysis_names subfolder names results .h5 file","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/ModelArray.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An S4 class to represent element-wise scalar data and statistics. — ModelArray","text":"ModelArray object","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/ModelArray.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent element-wise scalar data and statistics. — ModelArray","text":"results h5 group ModelArray analysis outputs sources list source filenames scalars list element-wise scalars path Path h5 file disk","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/ModelArray.lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit linear model for element-wise data — ModelArray.lm","title":"Fit linear model for element-wise data — ModelArray.lm","text":"`ModelArray.lm` fits linear model (`stats::lm()`) elements requested, returns tibble dataframe requested model statistics.","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/ModelArray.lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit linear model for element-wise data — ModelArray.lm","text":"","code":"ModelArray.lm(   formula,   data,   phenotypes,   scalar,   element.subset = NULL,   full.outputs = FALSE,   var.terms = c(\"estimate\", \"statistic\", \"p.value\"),   var.model = c(\"adj.r.squared\", \"p.value\"),   correct.p.value.terms = \"none\",   correct.p.value.model = \"none\",   verbose = TRUE,   pbar = TRUE,   n_cores = 1,   ... )"},{"path":"https://pennlinc.github.io/ModelArray/reference/ModelArray.lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit linear model for element-wise data — ModelArray.lm","text":"formula Formula (passed `stats::lm()`) data ModelArray class phenotypes data.frame cohort columns independent variables covariates added model. contains column called \"source_file\", column match data. scalar character. name element-wise scalar analysed element.subset list positive integers (min = 1, max = number elements). subset elements want run. Default `NULL`, .e. requesting elements `data`. full.outputs TRUE FALSE, Whether return full set outputs. FALSE, return listed arguments var.*; TRUE, arguments var.* ignored. var.terms list characters. list variables save terms (got `broom::tidy()`). See \"Details\" section . var.model list characters. list variables save model (got `broom::glance()`). See \"Details\" section . correct.p.value.terms list characters. perform add column p.value correction term. See \"Details\" section . correct.p.value.model list characters. perform add column p.value correction model. See \"Details\" section . verbose TRUE FALSE, print verbose message pbar TRUE FALSE, print progress bar n_cores Positive integer, number CPU cores run ... Additional arguments `stats::lm()`","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/ModelArray.lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit linear model for element-wise data — ModelArray.lm","text":"Tibble summarized model statistics elements requested","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/ModelArray.lm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit linear model for element-wise data — ModelArray.lm","text":"may request returning specific statistical variables setting var.*, can get setting full.outputs=TRUE.  Note statistics covered full.outputs var.* ones broom::tidy() broom::glance() , include corrected p values. List acceptable statistic names var.*: var.terms: c(\"estimate\",\"std.error\",\"statistic\",\"p.value\"); interpretation please see `broom:tidy()`. var.model: c(\"r.squared\", \"adj.r.squared\", \"sigma\", \"statistic\", \"p.value\", \"df\", \"logLik\", \"AIC\", \"BIC\", \"deviance\", \"df.residual\", \"nobs\"); interpretation please see `broom::glance()`. p-value corrections (arguments correct.p.value.*), supported methods include methods `p.adjust.methods` except \"none\". Can one method. Turn setting \"none\".","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/analyseOneElement.gam.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit GAM for one element — analyseOneElement.gam","title":"Fit GAM for one element — analyseOneElement.gam","text":"`analyseOneElement.gam` fits GAM model one element data, returns requested model statistics.","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/analyseOneElement.gam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit GAM for one element — analyseOneElement.gam","text":"","code":"analyseOneElement.gam(   i_element,   formula,   modelarray,   phenotypes,   scalar,   var.smoothTerms,   var.parametricTerms,   var.model,   flag_initiate = FALSE,   ... )"},{"path":"https://pennlinc.github.io/ModelArray/reference/analyseOneElement.gam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit GAM for one element — analyseOneElement.gam","text":"i_element integer, i_th element, starting 1. initiating (flag_initiate = TRUE), use i_element=1 formula formula (passed `mgcv::gam()`) modelarray ModelArray class phenotypes data.frame cohort columns independent variables covariates added model scalar character. name element-wise scalar analysed var.smoothTerms list variables save smooth terms (got broom::tidy(parametric = FALSE)). Example smooth term: age formula \"outcome ~ s(age)\". var.parametricTerms list variables save parametric terms (got broom::tidy(parametric = TRUE)). Example parametric term: sex formula \"outcome ~ s(age) + sex\". var.model list variables save model (got broom::glance() summary()). flag_initiate TRUE FALSE, Whether initiate new analysis. TRUE, return column names etc used initiating data.frame; FALSE, return list requested statistic values. ... Additional arguments `mgcv::gam()`","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/analyseOneElement.gam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit GAM for one element — analyseOneElement.gam","text":"flag_initiate==TRUE, returns column names, list term names final results, attr.name sp.criterion; flag_initiate==FALSE, return list requested statistic values element.","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/analyseOneElement.gam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit GAM for one element — analyseOneElement.gam","text":"`ModelArray.gam` iteratively calls function get statistics requested elements.","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/analyseOneElement.lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit linear model for one element. — analyseOneElement.lm","title":"Fit linear model for one element. — analyseOneElement.lm","text":"`analyseOneElement.lm` fits linear model one element data, returns requested model statistics.","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/analyseOneElement.lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit linear model for one element. — analyseOneElement.lm","text":"","code":"analyseOneElement.lm(   i_element,   formula,   modelarray,   phenotypes,   scalar,   var.terms,   var.model,   flag_initiate = FALSE,   ... )"},{"path":"https://pennlinc.github.io/ModelArray/reference/analyseOneElement.lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit linear model for one element. — analyseOneElement.lm","text":"i_element integer, i_th element, starting 1. initiating (flag_initiate = TRUE), use i_element=1 formula Formula (passed `stats::lm()`) modelarray ModelArray class phenotypes data.frame cohort columns independent variables covariates added model. scalar character. name element-wise scalar analysed var.terms list characters. list variables save terms (got `broom::tidy()`). var.model list characters. list variables save model (got `broom::glance()`). flag_initiate TRUE FALSE, Whether initiate new analysis. TRUE, return column names etc used initiating data.frame; FALSE, return list requested statistic values. ... Additional arguments `stats::lm()`","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/analyseOneElement.lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit linear model for one element. — analyseOneElement.lm","text":"flag_initiate==TRUE, returns column names, list term names final results; flag_initiate==FALSE, return list requested statistic values element.","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/analyseOneElement.lm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit linear model for one element. — analyseOneElement.lm","text":"`ModelArray.lm` iteratively calls function get statistics requested elements.","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/check_validity_correctPValue.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the list of p-value correction methods are valid for a specific type of term/model. \nCan be used for any statistical model. As long as the p.value to be correct is named as ","title":"Check if the list of p-value correction methods are valid for a specific type of term/model. \nCan be used for any statistical model. As long as the p.value to be correct is named as ","text":"Check list p-value correction methods valid specific type term/model.  Can used statistical model. long p.value correct named \"p.value\".","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/check_validity_correctPValue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the list of p-value correction methods are valid for a specific type of term/model. \nCan be used for any statistical model. As long as the p.value to be correct is named as ","text":"","code":"check_validity_correctPValue(   correct.list,   name.correct.list,   var.list,   name.var.list )"},{"path":"https://pennlinc.github.io/ModelArray/reference/check_validity_correctPValue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the list of p-value correction methods are valid for a specific type of term/model. \nCan be used for any statistical model. As long as the p.value to be correct is named as ","text":"correct.list list correction methods type term/model name.correct.list name list correction methods type term/model var.list list statistics saved type term/model name.var.list name list statistics saved type term/model","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/checker_gam_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"A checker for formula in gam for ModelArray.gam()\nTODO: finish the description — checker_gam_formula","title":"A checker for formula in gam for ModelArray.gam()\nTODO: finish the description — checker_gam_formula","text":"checker formula gam ModelArray.gam() TODO: finish description","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/checker_gam_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A checker for formula in gam for ModelArray.gam()\nTODO: finish the description — checker_gam_formula","text":"","code":"checker_gam_formula(formula, gam.formula.breakdown, onemodel = NULL)"},{"path":"https://pennlinc.github.io/ModelArray/reference/checker_gam_s.html","id":null,"dir":"Reference","previous_headings":"","what":"Print out important arguments in smooth terms s() in mgcv::gam() formula\nref: https://www.rdocumentation.org/packages/mgcv/versions/1.8-38/topics/s\nTODO: finish the description — checker_gam_s","title":"Print out important arguments in smooth terms s() in mgcv::gam() formula\nref: https://www.rdocumentation.org/packages/mgcv/versions/1.8-38/topics/s\nTODO: finish the description — checker_gam_s","text":"Print important arguments smooth terms s() mgcv::gam() formula ref: https://www.rdocumentation.org/packages/mgcv/versions/1.8-38/topics/s TODO: finish description","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/checker_gam_s.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print out important arguments in smooth terms s() in mgcv::gam() formula\nref: https://www.rdocumentation.org/packages/mgcv/versions/1.8-38/topics/s\nTODO: finish the description — checker_gam_s","text":"","code":"checker_gam_s(ofInterest)"},{"path":"https://pennlinc.github.io/ModelArray/reference/checker_gam_s.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print out important arguments in smooth terms s() in mgcv::gam() formula\nref: https://www.rdocumentation.org/packages/mgcv/versions/1.8-38/topics/s\nTODO: finish the description — checker_gam_s","text":"ofInterest got via: gam.formula.breakdown <- mgcv::interpret.gam(formula); ofInterest <- gam.formula.breakdown$smooth.spec[[]]","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/checker_gam_t.html","id":null,"dir":"Reference","previous_headings":"","what":"Print out important arguments in smooth term te() or ti() or t2() in mgcv::gam() formula\nWhy a separate function is needed for t(), cannot using s(): in ofInterest, ","title":"Print out important arguments in smooth term te() or ti() or t2() in mgcv::gam() formula\nWhy a separate function is needed for t(), cannot using s(): in ofInterest, ","text":"Print important arguments smooth term te() ti() t2() mgcv::gam() formula separate function needed t(), using s(): ofInterest, \"fx\" \"fx\" t(), \"fixed\" s() - different. ref: https://www.rdocumentation.org/packages/mgcv/versions/1.8-38/topics/te /t2() TODO: finish description","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/checker_gam_t.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print out important arguments in smooth term te() or ti() or t2() in mgcv::gam() formula\nWhy a separate function is needed for t(), cannot using s(): in ofInterest, ","text":"","code":"checker_gam_t(FUN, ofInterest)"},{"path":"https://pennlinc.github.io/ModelArray/reference/checker_gam_t.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print out important arguments in smooth term te() or ti() or t2() in mgcv::gam() formula\nWhy a separate function is needed for t(), cannot using s(): in ofInterest, ","text":"FUN mgcv::te(), ti() t2() ofInterest got via: gam.formula.breakdown <- mgcv::interpret.gam(formula); ofInterest <- gam.formula.breakdown$smooth.spec[[]]","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/generator_gamFormula_continuousInteraction.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate GAM formula with continuous*continuous interaction — generator_gamFormula_continuousInteraction","title":"Generate GAM formula with continuous*continuous interaction — generator_gamFormula_continuousInteraction","text":"function generate formula following format: y ~ ti(x) + ti(z) + ti(x,z), y response.var, x cont1.var, z cont2.var. formula generated modified, e.g. adding covariates.","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/generator_gamFormula_continuousInteraction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate GAM formula with continuous*continuous interaction — generator_gamFormula_continuousInteraction","text":"","code":"generator_gamFormula_continuousInteraction(   response.var,   cont1.var,   cont2.var,   fx = TRUE,   k = NULL )"},{"path":"https://pennlinc.github.io/ModelArray/reference/generator_gamFormula_continuousInteraction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate GAM formula with continuous*continuous interaction — generator_gamFormula_continuousInteraction","text":"response.var character class, variable name response cont1.var character class, name first continuous variable cont2.var character class, name second continuous variable fx TRUE FALSE, used smooth term s(). Recommend TRUE. k integer, used smooth term including interaction term. NULL (entry), use default value mgcv::s()","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/generator_gamFormula_continuousInteraction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate GAM formula with continuous*continuous interaction — generator_gamFormula_continuousInteraction","text":"formula generated","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/generator_gamFormula_factorXsmooth.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate GAM formula with factor-smooth interaction — generator_gamFormula_factorXsmooth","title":"Generate GAM formula with factor-smooth interaction — generator_gamFormula_factorXsmooth","text":"function generate formula following format: y ~ orderedFactor + s(x) + s(x, =orderedFactor), y response.var, x smooth.var, orderedFactor factor.var - see factor.var . formula generated modified, e.g. adding covariates.","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/generator_gamFormula_factorXsmooth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate GAM formula with factor-smooth interaction — generator_gamFormula_factorXsmooth","text":"","code":"generator_gamFormula_factorXsmooth(   response.var,   factor.var,   smooth.var,   phenotypes,   reference.group = NULL,   prefix.ordered.factor = \"o\",   fx = TRUE,   k = NULL )"},{"path":"https://pennlinc.github.io/ModelArray/reference/generator_gamFormula_factorXsmooth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate GAM formula with factor-smooth interaction — generator_gamFormula_factorXsmooth","text":"response.var character class, variable name response factor.var character class, variable name factor. ordered factor. , generate new column `phenotypes`, requires `reference.group`. smooth.var character class, variable name smooth term main effect phenotypes data.frame class, cohort matrix columns independent variables (including factor.var smooth.var) added model reference.group character class, reference group ordered factor `factor.var`; required `factor.var` `phenotypes` ordered factor. prefix.ordered.factor character class, prefix ordered factor; required `factor.var` `phenotypes` ordered factor. fx TRUE FALSE, used smooth term s(). Recommend TRUE. k integer, used smooth term including interaction term. NULL (entry), use default value mgcv::s()","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/generator_gamFormula_factorXsmooth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate GAM formula with factor-smooth interaction — generator_gamFormula_factorXsmooth","text":"list, including: 1) formula generated; 2) data.frame phenotypes - updated argument factor.var ordered factor","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/numElementsTotal.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of elements in ModelArray — numElementsTotal","title":"Number of elements in ModelArray — numElementsTotal","text":"Returns number elements ModelArray, specific scalar","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/numElementsTotal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of elements in ModelArray — numElementsTotal","text":"","code":"numElementsTotal(modelarray, scalar_name = \"FD\")"},{"path":"https://pennlinc.github.io/ModelArray/reference/numElementsTotal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of elements in ModelArray — numElementsTotal","text":"modelarray ModelArray class scalar_name character, scalar name (one existing scalar modelarray)","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/numElementsTotal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of elements in ModelArray — numElementsTotal","text":"numElementsTotal number elements ModelArray, specific scalar","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://pennlinc.github.io/ModelArray/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/printAdditionalArgu.html","id":null,"dir":"Reference","previous_headings":"","what":"print the additional arguments settings — printAdditionalArgu","title":"print the additional arguments settings — printAdditionalArgu","text":"print additional arguments settings","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/printAdditionalArgu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print the additional arguments settings — printAdditionalArgu","text":"","code":"printAdditionalArgu(   FUN,   argu_name,   dots,   message_default = NULL,   message_usr_input = NULL )"},{"path":"https://pennlinc.github.io/ModelArray/reference/printAdditionalArgu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print the additional arguments settings — printAdditionalArgu","text":"FUN function, e.g. mgcv::gam, without \"()\" argu_name argument name function message_default message default message_usr_input message describing user's input dots: list additional arguments","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/results-ModelArray-method.html","id":null,"dir":"Reference","previous_headings":"","what":"results of ModelArray — results,ModelArray-method","title":"results of ModelArray — results,ModelArray-method","text":"results ModelArray","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/results-ModelArray-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"results of ModelArray — results,ModelArray-method","text":"","code":"# S4 method for ModelArray results(x, ...)"},{"path":"https://pennlinc.github.io/ModelArray/reference/scalars-ModelArray-method.html","id":null,"dir":"Reference","previous_headings":"","what":"scalars of ModelArray — scalars,ModelArray-method","title":"scalars of ModelArray — scalars,ModelArray-method","text":"scalars ModelArray","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/scalars-ModelArray-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"scalars of ModelArray — scalars,ModelArray-method","text":"","code":"# S4 method for ModelArray scalars(x, ...)"},{"path":"https://pennlinc.github.io/ModelArray/reference/show-ModelArray-method.html","id":null,"dir":"Reference","previous_headings":"","what":"show ModelArray — show,ModelArray-method","title":"show ModelArray — show,ModelArray-method","text":"show ModelArray","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/show-ModelArray-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"show ModelArray — show,ModelArray-method","text":"","code":"# S4 method for ModelArray show(object)"},{"path":"https://pennlinc.github.io/ModelArray/reference/sources-ModelArray-method.html","id":null,"dir":"Reference","previous_headings":"","what":"source filenames of ModelArray — sources,ModelArray-method","title":"source filenames of ModelArray — sources,ModelArray-method","text":"source filenames ModelArray","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/sources-ModelArray-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"source filenames of ModelArray — sources,ModelArray-method","text":"","code":"# S4 method for ModelArray sources(x)"},{"path":"https://pennlinc.github.io/ModelArray/reference/writeResults.html","id":null,"dir":"Reference","previous_headings":"","what":"Write outputs from fixel-based analysis out to the h5 file. Write one results (i.e. for one analysis) at a time. This is ","title":"Write outputs from fixel-based analysis out to the h5 file. Write one results (i.e. for one analysis) at a time. This is ","text":"Write outputs fixel-based analysis h5 file. Write one results (.e. one analysis) time. \".enh\": 1) change hdf5r; 2) write results one row one fixel debug tip: \"Error H5File.open(filename, mode, file_create_pl, file_access_pl)\", check message 'file directory'. Try absolute .h5 filename.","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/writeResults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write outputs from fixel-based analysis out to the h5 file. Write one results (i.e. for one analysis) at a time. This is ","text":"","code":"writeResults(   fn.output,   df.output,   analysis_name = \"myAnalysis\",   overwrite = TRUE )"},{"path":"https://pennlinc.github.io/ModelArray/reference/writeResults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write outputs from fixel-based analysis out to the h5 file. Write one results (i.e. for one analysis) at a time. This is ","text":"fn.output .h5 filename output, including folder directory df.output data.frame object model results fixel, returned ModelArray.lm() etc analysis_name subfolder name results, holding analysis results overwrite analysis_name exists, whether overwrite (TRUE) (FALSE)","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/writeResults.old.html","id":null,"dir":"Reference","previous_headings":"","what":"Write outputs from fixel-based analysis out to the h5 file. Write one results (i.e. for one analysis) at a time. This is ","title":"Write outputs from fixel-based analysis out to the h5 file. Write one results (i.e. for one analysis) at a time. This is ","text":"Write outputs fixel-based analysis h5 file. Write one results (.e. one analysis) time. \".old\": writing results multiple rows one fixel","code":""},{"path":"https://pennlinc.github.io/ModelArray/reference/writeResults.old.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write outputs from fixel-based analysis out to the h5 file. Write one results (i.e. for one analysis) at a time. This is ","text":"","code":"writeResults.old(   modelarray,   data,   analysis_name = \"myAnalysis\",   flag_overwrite = TRUE )"},{"path":"https://pennlinc.github.io/ModelArray/reference/writeResults.old.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write outputs from fixel-based analysis out to the h5 file. Write one results (i.e. for one analysis) at a time. This is ","text":"modelarray ModelArray object data data.frame object model results fixel analysis_name subfolder name results, holding analysis results flag_overwrite analysis_name exists, whether overwrite ","code":""}]
